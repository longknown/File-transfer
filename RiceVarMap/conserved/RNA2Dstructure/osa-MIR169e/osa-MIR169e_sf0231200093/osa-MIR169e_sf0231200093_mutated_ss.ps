%!PS-Adobe-3.0 EPSF-3.0
%%Creator: PS_dot.c,v 1.38 2007/02/02 15:18:13 ivo Exp $, ViennaRNA-2.1.9
%%CreationDate: Thu Jul 16 15:13:52 2015
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 66 210 518 662
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: -d2 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  72 216 translate
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  72 6 mul size div dup scale
  size xmin sub xmax sub 2 div size ymin sub ymax sub 2 div
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
GCUGGUUGUGUAGCCAAGGAUGACUUGCCGGCCUGAUUUGUGUUCAUCAGCAAUCCAGCAUAUGCUGUAUUGCCGUGUGUGAUCGAUCGAUGCAUGGACCGGCAAGUUAUUUUCUUUGGCUACAUUACAACC\
) def
/coor [
[119.60417175 611.73480225]
[103.24618530 610.57366943]
[96.31704712 595.71032715]
[105.94486237 582.43493652]
[107.00691223 567.47253418]
[108.06896973 552.51019287]
[109.13102722 537.54785156]
[110.19308472 522.58551025]
[111.25513458 507.62313843]
[111.78649902 492.63253784]
[111.78649902 477.63253784]
[111.78649902 462.63253784]
[111.78649902 447.63253784]
[111.78649902 432.63253784]
[111.78649902 417.63253784]
[111.78649902 402.63253784]
[111.78649902 387.63253784]
[111.78649902 372.63253784]
[111.78649902 357.63253784]
[111.78649902 342.63253784]
[111.25513458 327.64196777]
[110.19308472 312.67962646]
[109.13102722 297.71725464]
[108.06896973 282.75491333]
[107.00691223 267.79254150]
[105.94486237 252.83020020]
[104.88280487 237.86784363]
[103.82074738 222.90548706]
[102.75869751 207.94313049]
[101.69664001 192.98077393]
[100.63458252 178.01843262]
[99.39588928 163.06965637]
[97.98074341 148.13656616]
[96.38932037 133.22122192]
[94.62186432 118.32571411]
[83.30560303 109.27649689]
[81.59828949 94.88790894]
[90.48262787 83.44174194]
[88.71517181 68.54623413]
[86.94770813 53.65073013]
[84.82893372 38.80112457]
[82.36001587 24.00570488]
[72.45680237 11.66726780]
[77.99373627 -2.15993881]
[75.52481842 -16.95535851]
[73.05590057 -31.75077820]
[70.58698273 -46.54619598]
[67.94349670 -61.31142807]
[65.12581635 -76.04440308]
[61.96094894 -90.70672607]
[58.45065689 -105.29020691]
[54.94036102 -119.87368011]
[51.43006897 -134.45715332]
[47.91977692 -149.04063416]
[37.16781616 -160.64692688]
[41.71183777 -174.83146667]
[38.20154190 -189.41494751]
[34.69124985 -203.99842834]
[31.18095779 -218.58189392]
[19.49938774 -230.09159851]
[23.88759613 -245.89271545]
[39.83137131 -249.73043823]
[50.92912292 -237.65682983]
[45.76443481 -222.09219360]
[49.27473068 -207.50871277]
[52.78502274 -192.92523193]
[56.29531479 -178.34176636]
[66.79619598 -167.77857971]
[62.50325394 -152.55093384]
[66.01354980 -137.96745300]
[69.52384186 -123.38397217]
[73.03413391 -108.80049896]
[76.54442596 -94.21701813]
[80.15898895 -90.96367645]
[81.70874023 -85.37065887]
[79.85879517 -78.86208344]
[82.67647552 -64.12910461]
[87.06461334 -58.09277344]
[85.38240051 -49.01511765]
[87.85131836 -34.21969604]
[90.32023621 -19.42427635]
[92.78916168 -4.62885761]
[102.51576996 6.65131330]
[97.15543365 21.53678703]
[99.62435150 36.33220673]
[102.99949646 39.83331299]
[104.14935303 45.52201462]
[101.84321594 51.88327026]
[103.61067963 66.77877808]
[105.37813568 81.67428589]
[116.69439697 90.72350311]
[118.40171051 105.11209106]
[109.51737213 116.55825806]
[111.28482819 131.45376587]
[115.43867493 139.69871521]
[112.91383362 146.72140503]
[114.32898712 161.65451050]
[118.28693390 169.99526978]
[115.59693909 176.95637512]
[116.65898895 191.91873169]
[117.72104645 206.88107300]
[118.78310394 221.84342957]
[119.84516144 236.80578613]
[120.90721130 251.76814270]
[121.96926880 266.73049927]
[123.03132629 281.69284058]
[124.09338379 296.65521240]
[125.15543365 311.61755371]
[126.21749115 326.57992554]
[129.25880432 331.05688477]
[130.12373352 335.77847290]
[129.09745789 339.85076904]
[126.78649902 342.63253784]
[126.78649902 357.63253784]
[126.78649902 372.63253784]
[126.78649902 387.63253784]
[126.78649902 402.63253784]
[126.78649902 417.63253784]
[126.78649902 432.63253784]
[126.78649902 447.63253784]
[126.78649902 462.63253784]
[126.78649902 477.63253784]
[126.78649902 492.63253784]
[129.50318909 497.31362915]
[130.03164673 502.08459473]
[128.71961975 506.07400513]
[126.21749115 508.68518066]
[125.15543365 523.64752197]
[124.09338379 538.60992432]
[123.03132629 553.57226562]
[121.96926880 568.53460693]
[120.90721130 583.49694824]
] def
/pairs [
[4 132]
[5 131]
[6 130]
[7 129]
[8 128]
[9 127]
[10 123]
[11 122]
[12 121]
[13 120]
[14 119]
[15 118]
[16 117]
[17 116]
[18 115]
[19 114]
[20 113]
[21 109]
[22 108]
[23 107]
[24 106]
[25 105]
[26 104]
[27 103]
[28 102]
[29 101]
[30 100]
[31 99]
[32 97]
[33 96]
[34 94]
[35 93]
[38 90]
[39 89]
[40 88]
[41 85]
[42 84]
[44 82]
[45 81]
[46 80]
[47 79]
[48 77]
[49 76]
[50 73]
[51 72]
[52 71]
[53 70]
[54 69]
[56 67]
[57 66]
[58 65]
[59 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF
