%!PS-Adobe-3.0 EPSF-3.0
%%Creator: PS_dot.c,v 1.38 2007/02/02 15:18:13 ivo Exp $, ViennaRNA-2.1.9
%%CreationDate: Thu Jul 16 15:13:58 2015
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 66 210 518 662
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: -d2 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  72 216 translate
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  72 6 mul size div dup scale
  size xmin sub xmax sub 2 div size ymin sub ymax sub 2 div
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
GUUUUACCGGGAGUUCUCUUCAAGCACUUCACGUAGGGCUUUCUAUUGACAUGGAGCUUUAGAACAAUGUGAAGUGUUUGGGGGAACUCUUGGUACCAA\
) def
/coor [
[77.03955841 581.52655029]
[66.96271515 569.84490967]
[64.82373810 554.56658936]
[71.30516052 540.56677246]
[84.33878326 532.31280518]
[84.33878326 517.31280518]
[84.33878326 502.31277466]
[84.33878326 487.31277466]
[84.33878326 472.31277466]
[84.33878326 457.31277466]
[84.33878326 442.31277466]
[84.33878326 427.31277466]
[84.33878326 412.31277466]
[84.33878326 397.31277466]
[84.33878326 382.31277466]
[84.33878326 367.31277466]
[81.13336945 360.50177002]
[84.58179474 351.84347534]
[85.05295563 336.85086060]
[85.52411652 321.85827637]
[85.99528503 306.86566162]
[86.46644592 291.87307739]
[86.93760681 276.88049316]
[87.40876770 261.88787842]
[87.87992859 246.89527893]
[88.35108948 231.90267944]
[88.82225037 216.91007996]
[89.29341125 201.91748047]
[89.76457214 186.92489624]
[90.23573303 171.93229675]
[90.70689392 156.93969727]
[91.17805481 141.94709778]
[91.64921570 126.95449829]
[92.12037659 111.96189880]
[85.68312073 99.55007172]
[92.88702393 87.56694031]
[82.34754181 76.09710693]
[83.03894806 60.89918900]
[94.03863525 50.92209244]
[94.50979614 35.92949295]
[94.03863525 20.93689537]
[92.62700653 6.00346661]
[91.21538544 -8.92996311]
[89.80375671 -23.86339188]
[88.39213562 -38.79682159]
[86.98050690 -53.73025131]
[77.04491425 -66.77693176]
[83.62461090 -81.79824066]
[99.95098114 -83.34153748]
[109.22884369 -69.81921387]
[101.91394043 -55.14187622]
[103.32556152 -40.20844650]
[104.73719025 -25.27501678]
[106.14881134 -10.34158707]
[107.56044006 4.59184217]
[108.97206116 19.52527237]
[111.24642181 21.44659042]
[112.82263184 24.46572876]
[113.24582672 28.29192924]
[112.18693542 32.46335602]
[109.50239563 36.40065765]
[109.03123474 51.39325333]
[119.38274384 62.04133987]
[119.11849976 77.25267792]
[107.87962341 88.03810120]
[114.31687927 100.44992828]
[107.11297607 112.43305969]
[106.64181519 127.42565918]
[106.17065430 142.41825867]
[105.69949341 157.41085815]
[105.22833252 172.40345764]
[104.75717163 187.39605713]
[104.28601074 202.38864136]
[103.81484985 217.38124084]
[103.34368896 232.37384033]
[102.87252808 247.36643982]
[102.40136719 262.35903931]
[101.93020630 277.35165405]
[101.45903778 292.34423828]
[100.98787689 307.33682251]
[100.51671600 322.32943726]
[100.04555511 337.32202148]
[99.57439423 352.31463623]
[99.33878326 367.31277466]
[99.33878326 382.31277466]
[99.33878326 397.31277466]
[99.33878326 412.31277466]
[99.33878326 427.31277466]
[99.33878326 442.31277466]
[99.33878326 457.31277466]
[99.33878326 472.31277466]
[99.33878326 487.31277466]
[99.33878326 502.31277466]
[99.33878326 517.31280518]
[99.33878326 532.31280518]
[112.37241364 540.56677246]
[118.85383606 554.56658936]
[116.71485901 569.84490967]
[106.63800812 581.52655029]
] def
/pairs [
[5 95]
[6 94]
[7 93]
[8 92]
[9 91]
[10 90]
[11 89]
[12 88]
[13 87]
[14 86]
[15 85]
[16 84]
[18 83]
[19 82]
[20 81]
[21 80]
[22 79]
[23 78]
[24 77]
[25 76]
[26 75]
[27 74]
[28 73]
[29 72]
[30 71]
[31 70]
[32 69]
[33 68]
[34 67]
[36 65]
[39 62]
[40 61]
[41 56]
[42 55]
[43 54]
[44 53]
[45 52]
[46 51]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF
