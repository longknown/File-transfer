%!PS-Adobe-3.0 EPSF-3.0
%%Creator: PS_dot.c,v 1.38 2007/02/02 15:18:13 ivo Exp $, ViennaRNA-2.1.9
%%CreationDate: Thu Jul 16 15:13:58 2015
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 66 210 518 662
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: -d2 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  72 216 translate
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  72 6 mul size div dup scale
  size xmin sub xmax sub 2 div size ymin sub ymax sub 2 div
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
GCUGAACCCAGAGGAGUGGUACUGAGAACACAGGUGCCAAUACAAUGUAUGGUGAGCUACUGUAUAAUGGAGUAAUUCUGUAACUGUGUUCUCAGGUCACCCCUUUGGGUUUCUU\
) def
/coor [
[79.64634705 584.08154297]
[71.89480591 570.50036621]
[74.73742676 555.12335205]
[86.83200836 545.21099854]
[86.83200836 530.21099854]
[86.83200836 515.21099854]
[86.83200836 500.21096802]
[86.83200836 485.21096802]
[86.83200836 470.21096802]
[86.83200836 455.21096802]
[86.83200836 440.21096802]
[86.83200836 425.21096802]
[86.83200836 410.21096802]
[86.83200836 395.21096802]
[79.09471130 382.48370361]
[86.83200836 368.68353271]
[86.83200836 353.68353271]
[86.83200836 338.68353271]
[86.83200836 323.68353271]
[78.46278381 314.83447266]
[78.41930389 302.25207520]
[87.27562714 292.75582886]
[87.68181610 277.76132202]
[88.08800507 262.76681519]
[88.49419403 247.77232361]
[88.90039062 232.77783203]
[89.30657959 217.78332520]
[89.71276855 202.78883362]
[90.11895752 187.79432678]
[90.52515411 172.79981995]
[90.93134308 157.80532837]
[91.33753204 142.81082153]
[91.74372101 127.81632996]
[74.02819824 117.10069275]
[67.05309296 96.10401917]
[75.88751984 74.27781677]
[65.87070465 63.11253738]
[55.85388947 51.94726181]
[45.83707428 40.78198624]
[37.66310120 36.40721130]
[35.70520782 29.17607498]
[25.99441528 17.74364471]
[16.28362083 6.31121302]
[1.42129350 -1.84645534]
[5.14585543 -18.38622475]
[22.07030487 -19.38588524]
[27.71605110 -3.39958119]
[37.42684555 8.03284931]
[47.13764191 19.46528053]
[57.00234985 30.76516914]
[67.01916504 41.93044662]
[77.03598022 53.09572220]
[87.05280304 64.26100159]
[101.88670349 62.03492737]
[108.18503571 48.42129898]
[114.48337555 34.80766678]
[113.25572968 19.03416061]
[125.62195587 10.73200989]
[131.92028809 -2.88162136]
[138.21862793 -16.49525261]
[144.51696777 -30.10888481]
[143.28932190 -45.88238907]
[155.65554810 -54.18453979]
[161.95388794 -67.79817200]
[163.11706543 -84.71217346]
[179.69204712 -88.27671814]
[187.70570374 -73.33625031]
[175.56752014 -61.49983597]
[169.26918030 -47.88620377]
[170.94732666 -33.08643723]
[158.13059998 -23.81054688]
[151.83226013 -10.19691658]
[145.53392029 3.41671515]
[139.23559570 17.03034592]
[140.91372681 31.83011436]
[128.09700012 41.10600281]
[121.79866791 54.71963501]
[115.50032806 68.33326721]
[126.01702118 77.77630615]
[131.71174622 90.25101471]
[131.94058228 103.54116821]
[126.99988556 115.42641449]
[118.02240753 124.05310822]
[106.73822021 128.22251892]
[106.33203125 143.21702576]
[105.92584229 158.21151733]
[105.51965332 173.20602417]
[105.11345673 188.20051575]
[104.70726776 203.19502258]
[104.30107880 218.18951416]
[103.89488983 233.18402100]
[103.48869324 248.17851257]
[103.08250427 263.17300415]
[102.67631531 278.16751099]
[102.27012634 293.16201782]
[111.43389130 309.06262207]
[101.83200836 323.68353271]
[101.83200836 338.68353271]
[101.83200836 353.68353271]
[101.83200836 368.68353271]
[109.56930542 382.48370361]
[101.83200836 395.21096802]
[101.83200836 410.21096802]
[101.83200836 425.21096802]
[101.83200836 440.21096802]
[101.83200836 455.21096802]
[101.83200836 470.21096802]
[101.83200836 485.21096802]
[101.83200836 500.21096802]
[101.83200836 515.21099854]
[101.83200836 530.21099854]
[101.83200836 545.21099854]
[113.92658997 555.12335205]
[116.76921082 570.50036621]
[109.01766968 584.08154297]
] def
/pairs [
[4 112]
[5 111]
[6 110]
[7 109]
[8 108]
[9 107]
[10 106]
[11 105]
[12 104]
[13 103]
[14 102]
[16 100]
[17 99]
[18 98]
[19 97]
[22 95]
[23 94]
[24 93]
[25 92]
[26 91]
[27 90]
[28 89]
[29 88]
[30 87]
[31 86]
[32 85]
[33 84]
[36 53]
[37 52]
[38 51]
[39 50]
[41 49]
[42 48]
[43 47]
[54 78]
[55 77]
[56 76]
[58 74]
[59 73]
[60 72]
[61 71]
[63 69]
[64 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF
