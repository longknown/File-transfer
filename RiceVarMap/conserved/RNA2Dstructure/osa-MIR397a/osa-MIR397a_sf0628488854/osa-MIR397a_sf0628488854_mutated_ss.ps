%!PS-Adobe-3.0 EPSF-3.0
%%Creator: PS_dot.c,v 1.38 2007/02/02 15:18:13 ivo Exp $, ViennaRNA-2.1.9
%%CreationDate: Thu Jul 16 15:13:58 2015
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 66 210 518 662
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: -d2 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  72 216 translate
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  72 6 mul size div dup scale
  size xmin sub xmax sub 2 div size ymin sub ymax sub 2 div
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
AUCAAAUGCAUCAUUGAGUGCAGCGUUGAUGAACAACGGUAACCGGUCCAUGUUGAUGCGCAUUUGGUCGGUGAUCUGAUCAUCAUCAGCGCUUCACUCAAUCAUGCGUUUGGC\
) def
/coor [
[86.45365906 586.54272461]
[92.50000000 570.70361328]
[92.50000000 555.70361328]
[92.50000000 540.70361328]
[92.50000000 525.70361328]
[92.50000000 510.70361328]
[92.50000000 495.70361328]
[92.50000000 480.70361328]
[92.50000000 465.70361328]
[92.50000000 450.70361328]
[92.50000000 435.70361328]
[84.76270294 422.97634888]
[92.50000000 409.17614746]
[92.50000000 394.17614746]
[92.50000000 379.17614746]
[92.50000000 364.17614746]
[92.50000000 349.17614746]
[92.50000000 334.17614746]
[92.50000000 319.17614746]
[92.50000000 304.17614746]
[84.76270294 291.44888306]
[92.50000000 277.64871216]
[92.50000000 262.64871216]
[92.50000000 247.64871216]
[92.50000000 232.64871216]
[92.50000000 217.64871216]
[92.50000000 202.64871216]
[92.50000000 187.64871216]
[92.50000000 172.64871216]
[92.50000000 157.64871216]
[92.50000000 142.64871216]
[92.50000000 127.64871979]
[79.70539856 120.21956635]
[72.32369232 107.39753723]
[72.32369232 92.60246277]
[79.70539856 79.78043365]
[92.50000000 72.35128021]
[92.50000000 57.35128403]
[92.50000000 42.35128403]
[79.92651367 30.28279495]
[79.90361786 13.19058800]
[91.96146393 1.55524480]
[91.55174255 -13.43915844]
[91.14202118 -28.43356133]
[90.73229980 -43.42796326]
[90.32257843 -58.42236710]
[86.92210388 -67.05013275]
[90.11209869 -73.83068848]
[90.11209869 -88.83068848]
[90.11209869 -103.83068848]
[89.70237732 -118.82509613]
[88.88323975 -133.80270386]
[88.06410217 -148.78033447]
[76.12937927 -159.14073181]
[75.09952545 -174.91143799]
[85.58553314 -186.73594666]
[101.36624146 -187.59901428]
[113.07923126 -176.98857117]
[113.77539825 -161.19963074]
[103.04171753 -149.59947205]
[103.86085510 -134.62185669]
[104.67999268 -119.64423370]
[107.67872620 -115.76857758]
[108.18168640 -109.93489075]
[105.11209869 -103.83068848]
[105.11209869 -88.83068848]
[105.11209869 -73.83068848]
[105.31697845 -58.83208847]
[105.72669983 -43.83768845]
[106.13642120 -28.84328270]
[106.54615021 -13.84888077]
[106.95587158 1.14552283]
[117.51321411 8.66913414]
[121.83395386 21.09887505]
[118.11082458 33.92412567]
[107.50000000 42.35128403]
[107.50000000 57.35128403]
[107.50000000 72.35128021]
[120.29460144 79.78043365]
[127.67630768 92.60246277]
[127.67630768 107.39753723]
[120.29460144 120.21956635]
[107.50000000 127.64871979]
[107.50000000 142.64871216]
[107.50000000 157.64871216]
[107.50000000 172.64871216]
[107.50000000 187.64871216]
[107.50000000 202.64871216]
[107.50000000 217.64871216]
[107.50000000 232.64871216]
[107.50000000 247.64871216]
[107.50000000 262.64871216]
[107.50000000 277.64871216]
[115.23729706 291.44888306]
[107.50000000 304.17614746]
[107.50000000 319.17614746]
[107.50000000 334.17614746]
[107.50000000 349.17614746]
[107.50000000 364.17614746]
[107.50000000 379.17614746]
[107.50000000 394.17614746]
[107.50000000 409.17614746]
[115.23729706 422.97634888]
[107.50000000 435.70361328]
[107.50000000 450.70361328]
[107.50000000 465.70361328]
[107.50000000 480.70361328]
[107.50000000 495.70361328]
[107.50000000 510.70361328]
[107.50000000 525.70361328]
[107.50000000 540.70361328]
[107.50000000 555.70361328]
[107.50000000 570.70361328]
[113.54634094 586.54272461]
] def
/pairs [
[2 113]
[3 112]
[4 111]
[5 110]
[6 109]
[7 108]
[8 107]
[9 106]
[10 105]
[11 104]
[13 102]
[14 101]
[15 100]
[16 99]
[17 98]
[18 97]
[19 96]
[20 95]
[22 93]
[23 92]
[24 91]
[25 90]
[26 89]
[27 88]
[28 87]
[29 86]
[30 85]
[31 84]
[32 83]
[37 78]
[38 77]
[39 76]
[42 72]
[43 71]
[44 70]
[45 69]
[46 68]
[48 67]
[49 66]
[50 65]
[51 62]
[52 61]
[53 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF
