%!PS-Adobe-3.0 EPSF-3.0
%%Creator: PS_dot.c,v 1.38 2007/02/02 15:18:13 ivo Exp $, ViennaRNA-2.1.9
%%CreationDate: Thu Jul 16 15:13:58 2015
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 66 210 518 662
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: -d2 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  72 216 translate
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  72 6 mul size div dup scale
  size xmin sub xmax sub 2 div size ymin sub ymax sub 2 div
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
GAGUUCCCUUCAAGCACUUCACGUGGCACUAUUUCAAUGCGUACCGUGUGAAGUGUUUGGGGGAACUC\
) def
/coor [
[81.35456085 472.29516602]
[81.35456085 457.29516602]
[81.35456085 442.29516602]
[81.35456085 427.29516602]
[81.35456085 412.29516602]
[81.35456085 397.29516602]
[81.35456085 382.29516602]
[81.35456085 367.29516602]
[81.35456085 352.29516602]
[78.09568787 345.37844849]
[81.71154785 336.61633301]
[82.39427185 321.63186646]
[83.07698822 306.64739990]
[83.75970459 291.66296387]
[84.44242859 276.67849731]
[85.12514496 261.69403076]
[85.80786133 246.70959473]
[86.49058533 231.72512817]
[87.17330170 216.74067688]
[87.85601807 201.75622559]
[88.53874207 186.77177429]
[89.22145844 171.78730774]
[89.90417480 156.80285645]
[90.58689880 141.81840515]
[91.26961517 126.83394623]
[91.95233154 111.84949493]
[85.69090271 99.34805298]
[93.06320953 87.46778870]
[93.74592590 72.48332977]
[94.08737946 57.48722076]
[94.08737946 42.48722076]
[94.08737946 27.48721886]
[85.42367554 13.56341648]
[93.38780212 -0.77201819]
[109.78694916 -0.77201819]
[117.75107574 13.56341648]
[109.08737946 27.48721886]
[109.08737946 42.48722076]
[109.08737946 57.48722076]
[112.34624481 64.40393829]
[108.73038483 73.16605377]
[108.04766846 88.15050507]
[114.30909729 100.65194702]
[106.93679047 112.53221130]
[106.25407410 127.51667023]
[105.57135010 142.50112915]
[104.88863373 157.48558044]
[104.20591736 172.47003174]
[103.52319336 187.45448303]
[102.84047699 202.43894958]
[102.15776062 217.42340088]
[101.47503662 232.40785217]
[100.79232025 247.39230347]
[100.10960388 262.37677002]
[99.42687988 277.36120605]
[98.74416351 292.34567261]
[98.06144714 307.33013916]
[97.37872314 322.31457520]
[96.69600677 337.29904175]
[96.35456085 352.29516602]
[96.35456085 367.29516602]
[96.35456085 382.29516602]
[96.35456085 397.29516602]
[96.35456085 412.29516602]
[96.35456085 427.29516602]
[96.35456085 442.29516602]
[96.35456085 457.29516602]
[96.35456085 472.29516602]
] def
/pairs [
[1 68]
[2 67]
[3 66]
[4 65]
[5 64]
[6 63]
[7 62]
[8 61]
[9 60]
[11 59]
[12 58]
[13 57]
[14 56]
[15 55]
[16 54]
[17 53]
[18 52]
[19 51]
[20 50]
[21 49]
[22 48]
[23 47]
[24 46]
[25 45]
[26 44]
[28 42]
[29 41]
[30 39]
[31 38]
[32 37]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF
