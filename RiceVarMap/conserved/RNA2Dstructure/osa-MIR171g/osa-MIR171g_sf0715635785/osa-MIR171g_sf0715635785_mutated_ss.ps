%!PS-Adobe-3.0 EPSF-3.0
%%Creator: PS_dot.c,v 1.38 2007/02/02 15:18:13 ivo Exp $, ViennaRNA-2.1.9
%%CreationDate: Thu Jul 16 15:13:53 2015
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 66 210 518 662
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: -d2 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  72 216 translate
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  72 6 mul size div dup scale
  size xmin sub xmax sub 2 div size ymin sub ymax sub 2 div
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
GACAUGGCAUGGUAUUGACUUGGCUCAUCUCAGCAACAGCAAACUGCAUGCAGCACUGGAGGUGAGCCGAGCCAAUAUCACUUCAUGUC\
) def
/coor [
[92.50000000 555.50195312]
[92.50000000 540.50195312]
[92.50000000 525.50195312]
[92.50000000 510.50192261]
[92.50000000 495.50192261]
[92.50000000 480.50192261]
[92.50000000 465.50192261]
[81.81912994 455.18426514]
[81.60544586 439.97210693]
[92.50000000 428.83898926]
[92.50000000 413.83898926]
[92.50000000 398.83898926]
[92.50000000 383.83898926]
[92.50000000 368.83898926]
[92.50000000 353.83898926]
[92.50000000 338.83898926]
[92.50000000 323.83898926]
[84.76270294 311.11172485]
[92.50000000 297.31155396]
[92.50000000 282.31155396]
[92.50000000 267.31155396]
[92.50000000 252.31155396]
[92.50000000 237.31155396]
[92.50000000 222.31155396]
[92.50000000 207.31155396]
[92.50000000 192.31155396]
[92.50000000 177.31155396]
[92.50000000 162.31155396]
[92.50000000 147.31155396]
[92.50000000 132.31155396]
[92.50000000 117.31155396]
[81.15948486 100.98738861]
[90.73153687 83.56724548]
[89.16361237 68.64941406]
[77.16500854 58.71607208]
[75.78741455 43.56493759]
[85.33129120 32.18732071]
[83.76335907 17.26949310]
[81.93531799 2.38130069]
[79.84772491 -12.47272015]
[77.76013184 -27.32674217]
[69.56825256 -42.17024231]
[81.56391907 -54.15106583]
[96.39726257 -45.94081116]
[92.61415100 -29.41433716]
[94.70174408 -14.56031704]
[96.78934479 0.29370427]
[100.92813873 6.61625957]
[98.68119049 15.70156574]
[100.24911499 30.61939430]
[111.94996643 39.76409912]
[113.75257874 54.87056351]
[104.08143616 67.08148956]
[105.64936066 81.99932098]
[113.39964294 86.71883392]
[118.05014038 94.51071930]
[118.52504730 103.57245636]
[114.71450043 111.80776978]
[107.50000000 117.31155396]
[107.50000000 132.31155396]
[107.50000000 147.31155396]
[107.50000000 162.31155396]
[107.50000000 177.31155396]
[107.50000000 192.31155396]
[107.50000000 207.31155396]
[107.50000000 222.31155396]
[107.50000000 237.31155396]
[107.50000000 252.31155396]
[107.50000000 267.31155396]
[107.50000000 282.31155396]
[107.50000000 297.31155396]
[115.23729706 311.11172485]
[107.50000000 323.83898926]
[107.50000000 338.83898926]
[107.50000000 353.83898926]
[107.50000000 368.83898926]
[107.50000000 383.83898926]
[107.50000000 398.83898926]
[107.50000000 413.83898926]
[107.50000000 428.83898926]
[118.39455414 439.97210693]
[118.18087006 455.18426514]
[107.50000000 465.50192261]
[107.50000000 480.50192261]
[107.50000000 495.50192261]
[107.50000000 510.50192261]
[107.50000000 525.50195312]
[107.50000000 540.50195312]
[107.50000000 555.50195312]
] def
/pairs [
[1 89]
[2 88]
[3 87]
[4 86]
[5 85]
[6 84]
[7 83]
[10 80]
[11 79]
[12 78]
[13 77]
[14 76]
[15 75]
[16 74]
[17 73]
[19 71]
[20 70]
[21 69]
[22 68]
[23 67]
[24 66]
[25 65]
[26 64]
[27 63]
[28 62]
[29 61]
[30 60]
[31 59]
[33 54]
[34 53]
[37 50]
[38 49]
[39 47]
[40 46]
[41 45]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF
