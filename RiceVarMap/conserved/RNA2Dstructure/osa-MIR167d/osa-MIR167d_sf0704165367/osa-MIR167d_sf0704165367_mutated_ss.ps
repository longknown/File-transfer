%!PS-Adobe-3.0 EPSF-3.0
%%Creator: PS_dot.c,v 1.38 2007/02/02 15:18:13 ivo Exp $, ViennaRNA-2.1.9
%%CreationDate: Thu Jul 16 15:13:52 2015
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 66 210 518 662
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: -d2 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  72 216 translate
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  72 6 mul size div dup scale
  size xmin sub xmax sub 2 div size ymin sub ymax sub 2 div
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
CAUUAGGAGCUGAAGCUGCCAGCAUGAUCUGAUGAGUGUUUAUUAGGUGAGGGCAGAAUUGACUGCCAAAACAAAGAUCAGAUCAUGCUGUGCAGUUUCAUCUGCUUGUG\
) def
/coor [
[92.50000000 225.25839233]
[92.50000000 210.25839233]
[92.50000000 195.25839233]
[84.76270294 182.53111267]
[92.50000000 168.73094177]
[92.50000000 153.73094177]
[84.76270294 141.00367737]
[92.50000000 127.20349884]
[92.50000000 112.20349884]
[85.67605591 100.00000000]
[92.50000000 87.79650116]
[92.50000000 72.79650116]
[92.50000000 57.79650116]
[92.50000000 42.79650116]
[92.50000000 27.79650116]
[92.50000000 12.79650021]
[92.50000000 -2.20349932]
[92.50000000 -17.20349884]
[92.50000000 -32.20349884]
[92.28773499 -47.20199585]
[91.86325073 -62.19599152]
[91.43877411 -77.18997955]
[91.01428986 -92.18397522]
[90.58980560 -107.17797089]
[90.16532135 -122.17195892]
[89.74083710 -137.16595459]
[89.31636047 -152.15994263]
[88.89187622 -167.15394592]
[88.46739197 -182.14793396]
[88.04290771 -197.14192200]
[87.61842346 -212.13591003]
[87.19393921 -227.12991333]
[86.76946259 -242.12390137]
[74.13020325 -250.93045044]
[69.15818024 -265.32254028]
[73.56204224 -279.71249390]
[85.45249176 -288.64303589]
[85.02800751 -303.63705444]
[84.60353088 -318.63104248]
[84.17904663 -333.62503052]
[83.75456238 -348.61901855]
[73.73376465 -337.45730591]
[59.57944489 -332.49191284]
[44.78175735 -334.94720459]
[32.98951340 -344.21777344]
[27.11044502 -358.01763916]
[28.59420586 -372.94406128]
[37.07493210 -385.31652832]
[50.46144867 -392.08416748]
[65.45291901 -391.57827759]
[78.35274506 -383.92355347]
[85.97975159 -371.00872803]
[89.34712219 -385.62585449]
[92.71449280 -400.24301147]
[96.08186340 -414.86013794]
[99.44923401 -429.47729492]
[90.85648346 -442.74151611]
[94.24138641 -458.17907715]
[107.59574127 -466.63110352]
[122.99663544 -463.08319092]
[131.30700684 -449.64022827]
[127.59645081 -434.27767944]
[114.06637573 -426.10992432]
[110.69900513 -411.49276733]
[107.33163452 -396.87564087]
[103.96426392 -382.25848389]
[100.59689331 -367.64135742]
[103.67732239 -358.60595703]
[98.74855804 -349.04351807]
[99.17303467 -334.04949951]
[99.59751892 -319.05551147]
[100.02200317 -304.06152344]
[100.44648743 -289.06753540]
[112.82314301 -280.82397461]
[118.03405762 -266.70623779]
[113.88423157 -252.05590820]
[101.76345062 -242.54838562]
[102.18793488 -227.55439758]
[102.61241913 -212.56039429]
[103.03690338 -197.56640625]
[103.46138763 -182.57241821]
[103.88586426 -167.57841492]
[104.31034851 -152.58442688]
[104.73483276 -137.59043884]
[105.15931702 -122.59644318]
[105.58380127 -107.60244751]
[106.00827789 -92.60845947]
[106.43276215 -77.61446381]
[106.85724640 -62.62047195]
[107.28173065 -47.62648010]
[110.66623688 -40.93171310]
[107.50000000 -32.20349884]
[107.50000000 -17.20349884]
[107.50000000 -2.20349932]
[107.50000000 12.79650021]
[107.50000000 27.79650116]
[107.50000000 42.79650116]
[107.50000000 57.79650116]
[107.50000000 72.79650116]
[107.50000000 87.79650116]
[114.32394409 100.00000000]
[107.50000000 112.20349884]
[107.50000000 127.20349884]
[115.23729706 141.00367737]
[107.50000000 153.73094177]
[107.50000000 168.73094177]
[115.23729706 182.53111267]
[107.50000000 195.25839233]
[107.50000000 210.25839233]
[107.50000000 225.25839233]
] def
/pairs [
[1 110]
[2 109]
[3 108]
[5 106]
[6 105]
[8 103]
[9 102]
[11 100]
[12 99]
[13 98]
[14 97]
[15 96]
[16 95]
[17 94]
[18 93]
[19 92]
[20 90]
[21 89]
[22 88]
[23 87]
[24 86]
[25 85]
[26 84]
[27 83]
[28 82]
[29 81]
[30 80]
[31 79]
[32 78]
[33 77]
[37 73]
[38 72]
[39 71]
[40 70]
[41 69]
[52 67]
[53 66]
[54 65]
[55 64]
[56 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF
