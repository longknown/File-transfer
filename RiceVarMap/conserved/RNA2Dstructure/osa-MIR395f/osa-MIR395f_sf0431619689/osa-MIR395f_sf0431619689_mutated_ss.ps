%!PS-Adobe-3.0 EPSF-3.0
%%Creator: PS_dot.c,v 1.38 2007/02/02 15:18:13 ivo Exp $, ViennaRNA-2.1.9
%%CreationDate: Thu Jul 16 15:13:58 2015
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 66 210 518 662
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: -d2 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  72 216 translate
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  72 6 mul size div dup scale
  size xmin sub xmax sub 2 div size ymin sub ymax sub 2 div
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
UUAUCGCGGGUUCCCUUCAAUCACUUCACAUGGUACUAUUUCAAGGCCUACUAUGUGAAGUGUUUGGGGGAACUCUCGAUGU\
) def
/coor [
[86.47970581 329.32205200]
[92.52604675 313.48291016]
[92.52604675 298.48291016]
[92.52604675 283.48291016]
[92.52604675 268.48291016]
[92.52604675 253.48291016]
[84.78874969 240.75564575]
[92.52604675 226.95545959]
[92.52604675 211.95545959]
[92.52604675 196.95545959]
[92.52604675 181.95545959]
[92.52604675 166.95545959]
[92.52604675 151.95545959]
[92.52604675 136.95545959]
[92.52604675 121.95546722]
[92.52604675 106.95546722]
[89.31142426 99.32439423]
[92.82065582 91.39053345]
[93.38827515 76.40127563]
[93.95589447 61.41201782]
[86.74636078 47.32893753]
[94.95973206 34.90357208]
[95.52735901 19.91431808]
[96.09497833 4.92506123]
[96.66259766 -10.06419563]
[97.23022461 -25.05345154]
[97.79784393 -40.04270935]
[98.36547089 -55.03196335]
[98.93309021 -70.02121735]
[99.50070953 -85.01047516]
[100.06833649 -99.99973297]
[100.63595581 -114.98899078]
[101.20357513 -129.97824097]
[101.77120209 -144.96749878]
[102.33882141 -159.95675659]
[102.05496216 -174.95407104]
[100.92053223 -189.91111755]
[88.77023315 -200.01783752]
[87.40843201 -215.76335144]
[97.64305115 -227.80610657]
[113.40207672 -229.00137329]
[125.33595276 -218.63999939]
[126.36453247 -202.86921692]
[115.87757111 -191.04554749]
[117.01200104 -176.08850098]
[119.68469238 -173.43334961]
[121.06777954 -169.24952698]
[120.40883636 -164.22763062]
[117.32807922 -159.38912964]
[116.76045990 -144.39988708]
[116.19283295 -129.41062927]
[115.62521362 -114.42136383]
[115.05759430 -99.43211365]
[114.48996735 -84.44285583]
[113.92234802 -69.45359802]
[113.35472107 -54.46434021]
[112.78710175 -39.47508621]
[112.21948242 -24.48583031]
[111.65185547 -9.49657345]
[111.08423615 5.49268341]
[110.51661682 20.48193932]
[109.94898987 35.47119522]
[117.19912720 48.48214340]
[108.94515228 61.97964096]
[108.37753296 76.96889496]
[107.80990601 91.95815277]
[107.52604675 106.95546722]
[107.52604675 121.95546722]
[107.52604675 136.95545959]
[107.52604675 151.95545959]
[107.52604675 166.95545959]
[107.52604675 181.95545959]
[107.52604675 196.95545959]
[107.52604675 211.95545959]
[107.52604675 226.95545959]
[115.26334381 240.75564575]
[107.52604675 253.48291016]
[107.52604675 268.48291016]
[107.52604675 283.48291016]
[107.52604675 298.48291016]
[107.52604675 313.48291016]
[113.57238770 329.32205200]
] def
/pairs [
[2 81]
[3 80]
[4 79]
[5 78]
[6 77]
[8 75]
[9 74]
[10 73]
[11 72]
[12 71]
[13 70]
[14 69]
[15 68]
[16 67]
[18 66]
[19 65]
[20 64]
[22 62]
[23 61]
[24 60]
[25 59]
[26 58]
[27 57]
[28 56]
[29 55]
[30 54]
[31 53]
[32 52]
[33 51]
[34 50]
[35 49]
[36 45]
[37 44]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF
