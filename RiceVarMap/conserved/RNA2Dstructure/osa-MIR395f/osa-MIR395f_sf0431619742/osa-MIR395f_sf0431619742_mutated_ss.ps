%!PS-Adobe-3.0 EPSF-3.0
%%Creator: PS_dot.c,v 1.38 2007/02/02 15:18:13 ivo Exp $, ViennaRNA-2.1.9
%%CreationDate: Thu Jul 16 15:13:58 2015
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 66 210 518 662
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: -d2 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  72 216 translate
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  72 6 mul size div dup scale
  size xmin sub xmax sub 2 div size ymin sub ymax sub 2 div
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
UUAUCGUGGGUUCCCUUCAAUCACUUCACAUGGUACUAUUUCAAGGCCUACUAUGUGAAUUGUUUGGGGGAACUCUCGAUGU\
) def
/coor [
[84.56738281 379.82098389]
[90.61372375 363.98184204]
[90.61372375 348.98184204]
[90.61372375 333.98184204]
[90.61372375 318.98184204]
[90.61372375 303.98184204]
[82.87642670 291.25457764]
[90.61372375 277.45440674]
[90.61372375 262.45440674]
[90.61372375 247.45439148]
[90.61372375 232.45439148]
[90.61372375 217.45439148]
[90.61372375 202.45439148]
[90.61372375 187.45439148]
[90.61372375 172.45439148]
[90.61372375 157.45439148]
[87.38400269 150.59535217]
[90.90833282 141.88946533]
[91.47595215 126.90020752]
[92.04357147 111.91094971]
[85.68631744 99.45796204]
[92.96717072 87.52143097]
[93.53479004 72.53217316]
[86.32525635 58.44909668]
[94.53862762 46.02373123]
[95.10625458 31.03447342]
[95.67387390 16.04521751]
[96.24149323 1.05596089]
[96.80912018 -13.93329525]
[97.37673950 -28.92255211]
[97.94436646 -43.91180801]
[98.51198578 -58.90106583]
[99.07960510 -73.89031982]
[99.64723206 -88.87957764]
[100.21485138 -103.86883545]
[99.93099213 -118.86614990]
[98.79656219 -133.82318115]
[86.64626312 -143.92991638]
[85.28445435 -159.67541504]
[95.51907349 -171.71818542]
[111.27809906 -172.91343689]
[123.21198273 -162.55206299]
[124.24056244 -146.78128052]
[113.75360107 -134.95762634]
[114.88803101 -120.00057983]
[117.56072235 -117.34542084]
[118.94380951 -113.16159821]
[118.28486633 -108.13970947]
[115.20410919 -103.30120850]
[114.63648224 -88.31195831]
[114.06886292 -73.32270050]
[113.50124359 -58.33344269]
[112.93361664 -43.34418488]
[112.36599731 -28.35492897]
[111.79837799 -13.36567307]
[111.23075104 1.62358308]
[110.66313171 16.61283875]
[110.09550476 31.60209656]
[109.52788544 46.59135056]
[116.77802277 59.60229874]
[108.52404785 73.09979248]
[107.95642853 88.08905029]
[114.31368256 100.54203796]
[107.03282928 112.47856903]
[106.46520996 127.46782684]
[105.89758301 142.45707703]
[105.61372375 157.45439148]
[105.61372375 172.45439148]
[105.61372375 187.45439148]
[105.61372375 202.45439148]
[105.61372375 217.45439148]
[105.61372375 232.45439148]
[105.61372375 247.45439148]
[105.61372375 262.45440674]
[105.61372375 277.45440674]
[113.35102081 291.25457764]
[105.61372375 303.98184204]
[105.61372375 318.98184204]
[105.61372375 333.98184204]
[105.61372375 348.98184204]
[105.61372375 363.98184204]
[111.66006470 379.82098389]
] def
/pairs [
[2 81]
[3 80]
[4 79]
[5 78]
[6 77]
[8 75]
[9 74]
[10 73]
[11 72]
[12 71]
[13 70]
[14 69]
[15 68]
[16 67]
[18 66]
[19 65]
[20 64]
[22 62]
[23 61]
[25 59]
[26 58]
[27 57]
[28 56]
[29 55]
[30 54]
[31 53]
[32 52]
[33 51]
[34 50]
[35 49]
[36 45]
[37 44]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF
