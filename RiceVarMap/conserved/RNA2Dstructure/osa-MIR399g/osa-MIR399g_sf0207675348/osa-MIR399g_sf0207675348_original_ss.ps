%!PS-Adobe-3.0 EPSF-3.0
%%Creator: PS_dot.c,v 1.38 2007/02/02 15:18:13 ivo Exp $, ViennaRNA-2.1.9
%%CreationDate: Thu Jul 16 15:14:00 2015
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 66 210 518 662
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: -d2 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  72 216 translate
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  72 6 mul size div dup scale
  size xmin sub xmax sub 2 div size ymin sub ymax sub 2 div
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
AUGUGCAUUGCAGGGCAACUACUCCAUUGGCAGAGGGAUGGAUUGGAUAUGGAUAUGGCUGAUGCUUCCAUUUGAUCCCAUCCCUAUCUGCCAAAGGAGAUUUGCCCAGCGAUUCACUC\
) def
/coor [
[83.88078308 444.96398926]
[80.52190399 429.27648926]
[90.80367279 416.96127319]
[90.80367279 401.96127319]
[90.80367279 386.96127319]
[83.06637573 374.23400879]
[90.80367279 360.43383789]
[90.80367279 345.43383789]
[90.80367279 330.43383789]
[90.80367279 315.43383789]
[90.80367279 300.43383789]
[83.06637573 287.70654297]
[90.80367279 273.90637207]
[90.80367279 258.90637207]
[90.80367279 243.90638733]
[90.80367279 228.90638733]
[90.80367279 213.90638733]
[90.80367279 198.90638733]
[83.06637573 186.17910767]
[90.80367279 172.37893677]
[87.61795044 165.60682678]
[91.00515747 156.98756409]
[91.39781189 141.99270630]
[91.79046631 126.99784851]
[92.18312073 112.00299072]
[85.68096161 99.62504578]
[92.82202148 87.60435486]
[93.21467590 72.60949707]
[93.60733032 57.61463547]
[93.99998474 42.61977386]
[94.39263916 27.62491608]
[94.78529358 12.63005638]
[95.17794800 -2.36480379]
[95.57060242 -17.35966301]
[95.57060242 -32.35966492]
[95.17794800 -47.35452271]
[94.78529358 -62.34938431]
[94.39263916 -77.34424591]
[93.99998474 -92.33910370]
[93.60733032 -107.33396149]
[93.21467590 -122.32881927]
[82.03242493 -133.17294312]
[81.84782410 -148.38546753]
[92.25495148 -158.97920227]
[84.15905762 -172.57209778]
[91.56054688 -185.49755859]
[91.16789246 -200.49241638]
[87.78068542 -209.11166382]
[90.96640778 -215.88378906]
[90.96640778 -230.88378906]
[90.96640778 -245.88378906]
[90.96640778 -260.88378906]
[90.96640778 -275.88378906]
[88.21823120 -280.61282349]
[87.69986725 -285.43206787]
[89.05164337 -289.44689941]
[91.60153961 -292.04910278]
[92.77842712 -307.00286865]
[93.95531464 -321.95663452]
[86.41076660 -336.51724243]
[95.47509003 -350.18362427]
[111.82368469 -348.89697266]
[118.63851929 -333.98086548]
[108.90907288 -320.77972412]
[107.73218536 -305.82598877]
[106.55530548 -290.87222290]
[105.96640778 -275.88378906]
[105.96640778 -260.88378906]
[105.96640778 -245.88378906]
[105.96640778 -230.88378906]
[105.96640778 -215.88378906]
[106.16275024 -200.88507080]
[106.55540466 -185.89021301]
[114.62321472 -173.36984253]
[107.24980927 -159.37185669]
[118.19710541 -149.33729553]
[118.80892181 -134.13597107]
[108.20953369 -122.72147369]
[108.60218811 -107.72661591]
[108.99484253 -92.73175812]
[109.38749695 -77.73690033]
[109.78015137 -62.74203873]
[110.17280579 -47.74717712]
[110.56546021 -32.75231934]
[113.44331360 -28.80028725]
[113.78406525 -22.97081947]
[110.56546021 -16.96701050]
[110.17280579 -1.97214973]
[109.78015137 13.02270985]
[109.38749695 28.01757050]
[108.99484253 43.01242828]
[108.60218811 58.00728989]
[108.20953369 73.00215149]
[107.81687927 87.99700928]
[114.31903839 100.37495422]
[107.17797852 112.39564514]
[106.78532410 127.39050293]
[106.39266968 142.38536072]
[106.00001526 157.38021851]
[105.80367279 172.37893677]
[113.54096985 186.17910767]
[105.80367279 198.90638733]
[105.80367279 213.90638733]
[105.80367279 228.90638733]
[105.80367279 243.90638733]
[105.80367279 258.90637207]
[105.80367279 273.90637207]
[113.54096985 287.70654297]
[105.80367279 300.43383789]
[105.80367279 315.43383789]
[105.80367279 330.43383789]
[105.80367279 345.43383789]
[105.80367279 360.43383789]
[113.54096985 374.23400879]
[105.80367279 386.96127319]
[105.80367279 401.96127319]
[105.80367279 416.96127319]
[116.08544159 429.27648926]
[112.72656250 444.96398926]
] def
/pairs [
[3 117]
[4 116]
[5 115]
[7 113]
[8 112]
[9 111]
[10 110]
[11 109]
[13 107]
[14 106]
[15 105]
[16 104]
[17 103]
[18 102]
[20 100]
[22 99]
[23 98]
[24 97]
[25 96]
[27 94]
[28 93]
[29 92]
[30 91]
[31 90]
[32 89]
[33 88]
[34 87]
[35 84]
[36 83]
[37 82]
[38 81]
[39 80]
[40 79]
[41 78]
[44 75]
[46 73]
[47 72]
[49 71]
[50 70]
[51 69]
[52 68]
[53 67]
[57 66]
[58 65]
[59 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF
