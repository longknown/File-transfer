%!PS-Adobe-3.0 EPSF-3.0
%%Creator: PS_dot.c,v 1.38 2007/02/02 15:18:13 ivo Exp $, ViennaRNA-2.1.9
%%CreationDate: Thu Jul 16 15:14:00 2015
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 66 210 518 662
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: -d2 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  72 216 translate
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  72 6 mul size div dup scale
  size xmin sub xmax sub 2 div size ymin sub ymax sub 2 div
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
GUGAGAAUCACAGUGCAGUUCUCCUCUGGCAUGGAGGGCAAGAGGAGCUGAAUAGCUAAUGGAUGAUAAACUGCUAGCCUUUCCCUGCCAAAGGAGAGCUGCCCUGCCAUUCAGUG\
) def
/coor [
[85.20077515 536.13513184]
[75.12393188 524.45349121]
[72.98494720 509.17510986]
[79.46636963 495.17529297]
[92.50000000 486.92132568]
[92.50000000 471.92132568]
[92.50000000 456.92132568]
[92.50000000 441.92132568]
[81.81912994 431.60363770]
[81.60544586 416.39151001]
[92.50000000 405.25839233]
[92.50000000 390.25839233]
[92.50000000 375.25839233]
[84.76270294 362.53112793]
[92.50000000 348.73095703]
[92.50000000 333.73095703]
[92.50000000 318.73095703]
[92.50000000 303.73095703]
[92.50000000 288.73095703]
[92.50000000 273.73095703]
[92.50000000 258.73095703]
[92.50000000 243.73094177]
[92.50000000 228.73094177]
[92.50000000 213.73094177]
[92.50000000 198.73094177]
[84.76270294 186.00367737]
[92.50000000 172.20350647]
[92.50000000 157.20350647]
[92.50000000 142.20350647]
[92.50000000 127.20349884]
[92.50000000 112.20349884]
[85.67605591 100.00000000]
[92.50000000 87.79650116]
[92.50000000 72.79650116]
[92.50000000 57.79650116]
[92.50000000 42.79650116]
[92.29862213 27.79785156]
[91.89590454 12.80325985]
[91.49317932 -2.19133329]
[83.38816071 -15.77880001]
[90.78097534 -28.70921516]
[90.37825012 -43.70380783]
[82.27323914 -57.29127502]
[89.66604614 -70.22168732]
[89.26332855 -85.21628571]
[86.26293945 -99.91313934]
[80.75605774 -113.86571503]
[75.24916840 -127.81828308]
[69.74227905 -141.77085876]
[56.57176971 -151.54170227]
[58.71686554 -167.79995728]
[73.97088623 -173.82049561]
[86.64179230 -163.40992737]
[83.69485474 -147.27774048]
[89.20173645 -133.32516479]
[94.70862579 -119.37259674]
[100.21550751 -105.42002869]
[104.36783600 -119.83384705]
[113.91217804 -131.40560913]
[127.27260590 -138.22460938]
[142.24310303 -139.16494751]
[156.35180664 -134.07135010]
[167.26911926 -123.78485107]
[173.19244385 -110.00391388]
[173.14372253 -95.00399780]
[167.13102722 -81.26181793]
[156.14712524 -71.04644012]
[142.00564575 -66.04458618]
[127.04157257 -67.08213806]
[113.72570801 -73.98778534]
[104.25791931 -85.61900330]
[104.66063690 -70.62441254]
[112.73685455 -58.10945511]
[105.37284851 -44.10652924]
[105.77556610 -29.11193466]
[113.85177612 -16.59698105]
[106.48777771 -2.59405327]
[106.89049530 12.40053940]
[107.29321289 27.39513206]
[110.66225433 34.08418655]
[107.50000000 42.79650116]
[107.50000000 57.79650116]
[107.50000000 72.79650116]
[107.50000000 87.79650116]
[114.32394409 100.00000000]
[107.50000000 112.20349884]
[107.50000000 127.20349884]
[107.50000000 142.20350647]
[107.50000000 157.20350647]
[107.50000000 172.20350647]
[115.23729706 186.00367737]
[107.50000000 198.73094177]
[107.50000000 213.73094177]
[107.50000000 228.73094177]
[107.50000000 243.73094177]
[107.50000000 258.73095703]
[107.50000000 273.73095703]
[107.50000000 288.73095703]
[107.50000000 303.73095703]
[107.50000000 318.73095703]
[107.50000000 333.73095703]
[107.50000000 348.73095703]
[115.23729706 362.53112793]
[107.50000000 375.25839233]
[107.50000000 390.25839233]
[107.50000000 405.25839233]
[118.39455414 416.39151001]
[118.18087006 431.60363770]
[107.50000000 441.92132568]
[107.50000000 456.92132568]
[107.50000000 471.92132568]
[107.50000000 486.92132568]
[120.53363037 495.17529297]
[127.01505280 509.17510986]
[124.87606812 524.45349121]
[114.79922485 536.13513184]
] def
/pairs [
[5 112]
[6 111]
[7 110]
[8 109]
[11 106]
[12 105]
[13 104]
[15 102]
[16 101]
[17 100]
[18 99]
[19 98]
[20 97]
[21 96]
[22 95]
[23 94]
[24 93]
[25 92]
[27 90]
[28 89]
[29 88]
[30 87]
[31 86]
[33 84]
[34 83]
[35 82]
[36 81]
[37 79]
[38 78]
[39 77]
[41 75]
[42 74]
[44 72]
[45 71]
[46 57]
[47 56]
[48 55]
[49 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF
