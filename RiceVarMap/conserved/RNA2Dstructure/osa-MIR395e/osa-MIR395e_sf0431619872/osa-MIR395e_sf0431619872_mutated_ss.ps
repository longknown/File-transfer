%!PS-Adobe-3.0 EPSF-3.0
%%Creator: PS_dot.c,v 1.38 2007/02/02 15:18:13 ivo Exp $, ViennaRNA-2.1.9
%%CreationDate: Thu Jul 16 15:13:58 2015
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 66 210 518 662
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: -d2 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  72 216 translate
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  72 6 mul size div dup scale
  size xmin sub xmax sub 2 div size ymin sub ymax sub 2 div
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
GUAUUAUCGAGAGUUCCCUUUAACCACUUCACGUGGCACUGUUUCAAGGCCUAUUGUGUGAAGUGUUUGGGGGAACUCUCGAUAUCAC\
) def
/coor [
[92.52441406 440.13247681]
[92.52441406 425.13247681]
[81.84354401 414.81478882]
[81.62986755 399.60266113]
[92.52441406 388.46954346]
[92.52441406 373.46954346]
[92.52441406 358.46954346]
[92.52441406 343.46954346]
[92.52441406 328.46954346]
[92.52441406 313.46954346]
[92.52441406 298.46954346]
[92.52441406 283.46954346]
[92.52441406 268.46954346]
[92.52441406 253.46954346]
[92.52441406 238.46954346]
[92.52441406 223.46954346]
[92.52441406 208.46954346]
[92.52441406 193.46954346]
[92.52441406 178.46954346]
[92.52441406 163.46954346]
[84.78711700 150.74227905]
[92.52441406 136.94209290]
[92.52441406 121.94210052]
[92.52441406 106.94210052]
[89.31704712 99.33468628]
[92.79849243 91.41506195]
[93.32785797 76.42440796]
[93.85723114 61.43375015]
[94.38660431 46.44309616]
[94.91597748 31.45244026]
[95.44535065 16.46178436]
[95.97472382 1.47112811]
[96.50408936 -13.51952744]
[84.19568634 -32.09206390]
[95.29992676 -50.56093597]
[93.71444702 -65.47691345]
[92.12896729 -80.39288330]
[88.03076172 -88.81184387]
[90.76032257 -95.86190796]
[89.70223999 -110.82454681]
[77.60367584 -120.99314117]
[76.32225037 -136.74539185]
[86.61819458 -148.73577881]
[102.38311005 -149.85058594]
[114.26396179 -139.42845154]
[115.21204376 -123.65262604]
[104.66487122 -111.88262939]
[105.72295380 -96.91999054]
[107.04494476 -81.97836304]
[108.63042450 -67.06238556]
[110.21590424 -52.14641571]
[117.69143677 -48.38504028]
[123.02693939 -41.81430054]
[125.22273254 -33.54087067]
[123.81667328 -25.00030136]
[118.97874451 -17.70795059]
[111.49475098 -12.99015617]
[110.96537781 2.00049996]
[110.43600464 16.99115562]
[109.90663147 31.98181152]
[109.37725830 46.97246933]
[108.84788513 61.96312332]
[108.31851959 76.95378113]
[107.78914642 91.94443512]
[107.52441406 106.94210052]
[107.52441406 121.94210052]
[107.52441406 136.94209290]
[115.26171875 150.74227905]
[107.52441406 163.46954346]
[107.52441406 178.46954346]
[107.52441406 193.46954346]
[107.52441406 208.46954346]
[107.52441406 223.46954346]
[107.52441406 238.46954346]
[107.52441406 253.46954346]
[107.52441406 268.46954346]
[107.52441406 283.46954346]
[107.52441406 298.46954346]
[107.52441406 313.46954346]
[107.52441406 328.46954346]
[107.52441406 343.46954346]
[107.52441406 358.46954346]
[107.52441406 373.46954346]
[107.52441406 388.46954346]
[118.41896820 399.60266113]
[118.20529175 414.81478882]
[107.52441406 425.13247681]
[107.52441406 440.13247681]
] def
/pairs [
[1 88]
[2 87]
[5 84]
[6 83]
[7 82]
[8 81]
[9 80]
[10 79]
[11 78]
[12 77]
[13 76]
[14 75]
[15 74]
[16 73]
[17 72]
[18 71]
[19 70]
[20 69]
[22 67]
[23 66]
[24 65]
[26 64]
[27 63]
[28 62]
[29 61]
[30 60]
[31 59]
[32 58]
[33 57]
[35 51]
[36 50]
[37 49]
[39 48]
[40 47]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF
