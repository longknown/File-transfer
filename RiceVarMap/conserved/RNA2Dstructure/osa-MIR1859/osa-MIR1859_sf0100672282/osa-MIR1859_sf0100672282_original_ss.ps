%!PS-Adobe-3.0 EPSF-3.0
%%Creator: PS_dot.c,v 1.38 2007/02/02 15:18:13 ivo Exp $, ViennaRNA-2.1.9
%%CreationDate: Thu Jul 16 15:13:54 2015
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 66 210 518 662
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: -d2 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  72 216 translate
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  72 6 mul size div dup scale
  size xmin sub xmax sub 2 div size ymin sub ymax sub 2 div
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
GGGAGUUGUAGGAAUGGAUGCGUAGAGAAAGAAAUGAAAUCUGAACCAGAUUUGUGAUUUGAUUCUUUCCUAUGACGUCCAUUCCAAUGAUUUCCAG\
) def
/coor [
[118.22161102 463.23483276]
[117.26055908 448.26565552]
[116.29950714 433.29647827]
[115.33844757 418.32730103]
[114.37739563 403.35809326]
[113.41634369 388.38891602]
[112.45529175 373.41973877]
[111.49423981 358.45056152]
[110.53318787 343.48138428]
[101.99634552 331.27600098]
[108.83356476 317.00845337]
[107.87251282 302.03924561]
[106.91146088 287.07006836]
[105.95040131 272.10089111]
[104.98934937 257.13171387]
[104.02829742 242.16253662]
[103.06724548 227.19335938]
[102.10619354 212.22416687]
[101.14514160 197.25498962]
[100.18408203 182.28581238]
[98.98323059 167.33395386]
[97.54288483 152.40327454]
[96.10253906 137.47257996]
[94.66219330 122.54190063]
[93.22184753 107.61121368]
[89.31086731 100.37589264]
[91.98250580 92.18006134]
[91.02144623 77.21088409]
[90.06039429 62.24170303]
[89.09934235 47.27252197]
[88.13829041 32.30334091]
[87.17723846 17.33415985]
[86.21617889 2.36497951]
[82.48433685 -6.18286371]
[85.47206116 -13.09796143]
[77.29642487 -26.64305115]
[84.62181854 -39.61177826]
[84.14104462 -54.60406876]
[83.66027069 -69.59636688]
[83.17949677 -84.58865356]
[82.69872284 -99.58094788]
[68.46334839 -104.91222382]
[57.35517502 -115.28897858]
[51.06812286 -129.12882996]
[50.56092453 -144.32128906]
[55.91091919 -158.54965210]
[66.30227661 -169.64416504]
[80.15038300 -175.91299438]
[95.34350586 -176.40020752]
[109.56481171 -171.03150940]
[120.64564514 -160.62556458]
[126.89626312 -146.76922607]
[127.36348724 -131.57546997]
[121.97607422 -117.36124420]
[111.55557251 -106.29410553]
[97.69101715 -100.06172180]
[98.17179108 -85.06942749]
[98.65256500 -70.07713318]
[99.13333893 -55.08484268]
[99.61411285 -40.09255219]
[107.75536346 -27.61981010]
[100.46435547 -13.57873535]
[101.18536377 1.40392613]
[102.14641571 16.37310791]
[103.10746765 31.34228706]
[104.06851959 46.31147003]
[105.02957916 61.28065109]
[105.99063110 76.24983215]
[106.95168304 91.21900940]
[108.15253448 106.17086792]
[109.59288025 121.10155487]
[111.03322601 136.03224182]
[112.47357178 150.96292114]
[113.91391754 165.89361572]
[117.91781616 174.31745911]
[115.15326691 181.32475281]
[116.11431885 196.29394531]
[117.07537079 211.26312256]
[118.03642273 226.23229980]
[118.99748230 241.20147705]
[119.95853424 256.17065430]
[120.91958618 271.13983154]
[121.88063812 286.10903931]
[122.84169006 301.07821655]
[123.80274200 316.04739380]
[132.40832520 329.32348633]
[125.50236511 342.52032471]
[126.46341705 357.48950195]
[127.42446899 372.45867920]
[128.38552856 387.42785645]
[129.34657288 402.39706421]
[130.30763245 417.36624146]
[131.26869202 432.33541870]
[132.22973633 447.30459595]
[133.19079590 462.27377319]
[140.23951721 477.69296265]
[127.37419891 488.73471069]
] def
/pairs [
[1 95]
[2 94]
[3 93]
[4 92]
[5 91]
[6 90]
[7 89]
[8 88]
[9 87]
[11 85]
[12 84]
[13 83]
[14 82]
[15 81]
[16 80]
[17 79]
[18 78]
[19 77]
[20 76]
[21 74]
[22 73]
[23 72]
[24 71]
[25 70]
[27 69]
[28 68]
[29 67]
[30 66]
[31 65]
[32 64]
[33 63]
[35 62]
[37 60]
[38 59]
[39 58]
[40 57]
[41 56]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF
