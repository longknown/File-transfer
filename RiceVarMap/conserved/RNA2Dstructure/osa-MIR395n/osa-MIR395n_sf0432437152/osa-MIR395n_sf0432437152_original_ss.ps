%!PS-Adobe-3.0 EPSF-3.0
%%Creator: PS_dot.c,v 1.38 2007/02/02 15:18:13 ivo Exp $, ViennaRNA-2.1.9
%%CreationDate: Thu Jul 16 15:13:58 2015
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 66 210 518 662
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: -d2 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  72 216 translate
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  72 6 mul size div dup scale
  size xmin sub xmax sub 2 div size ymin sub ymax sub 2 div
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
GAGUUCCCUUCAAGCACUUCACGACGCACUAUUUAGAGAGUUGUUGUGAAGUGUUUGGGGGAACUC\
) def
/coor [
[92.53166199 227.00317383]
[92.53166199 212.00317383]
[92.53166199 197.00317383]
[92.53166199 182.00317383]
[92.53166199 167.00317383]
[92.53166199 152.00317383]
[92.53166199 137.00317383]
[92.53166199 122.00317383]
[92.53166199 107.00317383]
[89.29140472 99.28789520]
[92.89978790 91.30421448]
[93.60287476 76.32070160]
[94.30595398 61.33718872]
[95.00904083 46.35367584]
[95.71212006 31.37016106]
[96.41520691 16.38664818]
[97.11829376 1.40313458]
[97.82137299 -13.58037853]
[98.52445984 -28.56389236]
[99.22753906 -43.54740524]
[99.93062592 -58.53091812]
[100.63371277 -73.51443481]
[101.33679199 -88.49794769]
[102.03987885 -103.48146057]
[102.74296570 -118.46497345]
[103.44604492 -133.44848633]
[100.65126038 -142.52206421]
[104.54961395 -149.11293030]
[105.95423889 -164.04702759]
[107.35885620 -178.98112488]
[95.62594604 -189.13584900]
[92.13541412 -204.25523376]
[98.22944641 -218.52555847]
[111.56475830 -226.45960999]
[127.01364899 -225.00656128]
[138.63571167 -214.72515869]
[141.96202087 -199.56880188]
[135.71354675 -185.36541748]
[122.29294586 -177.57649231]
[120.88832855 -162.64241028]
[119.48370361 -147.70831299]
[118.42955780 -132.74540710]
[117.72647858 -117.76188660]
[117.02339172 -102.77837372]
[116.32030487 -87.79486084]
[115.61722565 -72.81134796]
[114.91413879 -57.82783508]
[114.21105957 -42.84432220]
[113.50797272 -27.86080742]
[112.80488586 -12.87729454]
[112.10180664 2.10621858]
[111.39871979 17.08973122]
[110.69563293 32.07324600]
[109.99255371 47.05675888]
[109.28946686 62.04027176]
[108.58638763 77.02378845]
[107.88330078 92.00730133]
[107.53166199 107.00317383]
[107.53166199 122.00317383]
[107.53166199 137.00317383]
[107.53166199 152.00317383]
[107.53166199 167.00317383]
[107.53166199 182.00317383]
[107.53166199 197.00317383]
[107.53166199 212.00317383]
[107.53166199 227.00317383]
] def
/pairs [
[1 66]
[2 65]
[3 64]
[4 63]
[5 62]
[6 61]
[7 60]
[8 59]
[9 58]
[11 57]
[12 56]
[13 55]
[14 54]
[15 53]
[16 52]
[17 51]
[18 50]
[19 49]
[20 48]
[21 47]
[22 46]
[23 45]
[24 44]
[25 43]
[26 42]
[28 41]
[29 40]
[30 39]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF
