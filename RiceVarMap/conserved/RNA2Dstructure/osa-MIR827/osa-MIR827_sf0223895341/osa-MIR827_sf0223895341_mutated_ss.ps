%!PS-Adobe-3.0 EPSF-3.0
%%Creator: PS_dot.c,v 1.38 2007/02/02 15:18:13 ivo Exp $, ViennaRNA-2.1.9
%%CreationDate: Thu Jul 16 15:14:02 2015
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 66 210 518 662
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: -d2 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  72 216 translate
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  72 6 mul size div dup scale
  size xmin sub xmax sub 2 div size ymin sub ymax sub 2 div
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
UUUUGUUGCUGGUCAUCUAGCUACCCGUGCAUGCCUGGAGAUUGGAGAAUAAUUGACGAUGCAGCAGUCGGCUUCUUGGCUCUUGGGCACGCGUGGUUAGAUGACCAUCAGCAAACA\
) def
/coor [
[95.54763794 532.59466553]
[103.83761597 518.44512939]
[103.43830872 503.45043945]
[103.03899384 488.45578003]
[102.63968658 473.46109009]
[102.24037933 458.46640015]
[101.84107208 443.47171021]
[101.44176483 428.47702026]
[93.36840057 415.96023560]
[100.73558807 401.95898438]
[100.33628082 386.96429443]
[99.93697357 371.96963501]
[99.53766632 356.97494507]
[99.13835907 341.98025513]
[98.73905182 326.98556519]
[98.33974457 311.99087524]
[97.94043732 296.99621582]
[97.54113007 282.00152588]
[97.14182281 267.00683594]
[96.74251556 252.01214600]
[96.34320831 237.01747131]
[95.94390106 222.02278137]
[95.54458618 207.02809143]
[95.14527893 192.03341675]
[87.07191467 179.51661682]
[94.43910980 165.51536560]
[94.03980255 150.52069092]
[93.64049530 135.52600098]
[93.24118042 120.53131866]
[92.84187317 105.53662872]
[90.33119965 102.42140961]
[89.26718140 98.18436432]
[90.13059998 93.52613831]
[93.05749512 89.34031677]
[93.85582733 74.36157990]
[86.86396790 60.16917038]
[95.26766968 47.87173462]
[96.06600189 32.89299393]
[96.86433411 17.91425133]
[97.66267395 2.93551183]
[88.03376770 -4.29432869]
[83.19572449 -15.18871784]
[84.26692200 -26.93963623]
[90.85887909 -36.58037949]
[101.20430756 -41.73455048]
[102.79870605 -56.64957428]
[104.39311218 -71.56459808]
[105.98751068 -86.47961426]
[107.58191681 -101.39463806]
[100.17557526 -109.57939148]
[98.60177612 -120.28138733]
[103.14871216 -129.85209656]
[112.05935669 -135.16575623]
[114.44531250 -149.97479248]
[116.83126068 -164.78381348]
[119.21721649 -179.59283447]
[121.60316467 -194.40185547]
[110.04838562 -204.62391663]
[105.87634277 -219.47645569]
[110.41831970 -234.22006226]
[122.22499084 -244.15011597]
[137.52888489 -246.09797668]
[151.44660950 -239.44207764]
[159.53703308 -226.30630493]
[159.21855164 -210.88223267]
[150.59278870 -198.09162903]
[136.41218567 -192.01591492]
[134.02624512 -177.20687866]
[131.64028931 -162.39785767]
[129.25433350 -147.58883667]
[126.86838531 -132.77981567]
[135.14414978 -115.38798523]
[122.49694061 -99.80023956]
[120.90253448 -84.88521576]
[119.30813599 -69.97019196]
[117.71372986 -55.05517197]
[116.11933136 -40.14014816]
[128.45164490 -26.73879433]
[127.18000793 -8.25448322]
[112.64141083 3.73384428]
[111.84307861 18.71258545]
[111.04474640 33.69132614]
[110.24641418 48.67006683]
[117.29537201 61.79109573]
[108.83456421 75.15991211]
[108.03623199 90.13865662]
[107.83656311 105.13732147]
[108.23587036 120.13201141]
[108.63517761 135.12669373]
[109.03448486 150.12138367]
[109.43379211 165.11605835]
[117.53572083 178.70536804]
[110.13996887 191.63410950]
[110.53927612 206.62878418]
[110.93858337 221.62347412]
[111.33789062 236.61814880]
[111.73719788 251.61283875]
[112.13650513 266.60751343]
[112.53581238 281.60220337]
[112.93511963 296.59689331]
[113.33442688 311.59158325]
[113.73373413 326.58627319]
[114.13304138 341.58093262]
[114.53234863 356.57562256]
[114.93166351 371.57031250]
[115.33097076 386.56500244]
[115.73027802 401.55969238]
[123.83219910 415.14898682]
[116.43644714 428.07772827]
[116.83575439 443.07241821]
[117.23506927 458.06710815]
[117.63437653 473.06176758]
[118.03368378 488.05645752]
[118.43299103 503.05114746]
[118.83229828 518.04583740]
[127.86358643 531.73406982]
[120.28389740 546.27642822]
] def
/pairs [
[2 115]
[3 114]
[4 113]
[5 112]
[6 111]
[7 110]
[8 109]
[10 107]
[11 106]
[12 105]
[13 104]
[14 103]
[15 102]
[16 101]
[17 100]
[18 99]
[19 98]
[20 97]
[21 96]
[22 95]
[23 94]
[24 93]
[26 91]
[27 90]
[28 89]
[29 88]
[30 87]
[34 86]
[35 85]
[37 83]
[38 82]
[39 81]
[40 80]
[45 77]
[46 76]
[47 75]
[48 74]
[49 73]
[53 71]
[54 70]
[55 69]
[56 68]
[57 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF
