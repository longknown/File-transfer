%!PS-Adobe-3.0 EPSF-3.0
%%Creator: PS_dot.c,v 1.38 2007/02/02 15:18:13 ivo Exp $, ViennaRNA-2.1.9
%%CreationDate: Thu Jul 16 15:13:51 2015
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 66 210 518 662
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: -d2 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  72 216 translate
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  72 6 mul size div dup scale
  size xmin sub xmax sub 2 div size ymin sub ymax sub 2 div
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
GGCAGGUGAGGGGAAUGUUGUCUGGUCCGAGACCUAACACCGGGCGGAAUGGCGGAUUCAGCUGCAGCUAAGCAAGCUAGGUGGGGGGUUUCGGACCAGGCUUCAUUCCCCCCAACUCAACUGUU\
) def
/coor [
[135.22250366 614.51538086]
[141.26884460 598.67626953]
[141.26884460 583.67626953]
[141.26884460 568.67626953]
[141.26884460 553.67626953]
[133.53153992 540.94897461]
[141.26884460 527.14880371]
[141.26884460 512.14880371]
[141.26884460 497.14883423]
[140.33445740 482.17794800]
[138.46929932 467.29437256]
[136.60414124 452.41076660]
[134.73898315 437.52719116]
[132.87382507 422.64361572]
[131.00866699 407.76000977]
[129.14352417 392.87643433]
[127.27835846 377.99282837]
[115.39744568 369.08334351]
[113.29388428 354.01583862]
[122.71955872 341.61444092]
[120.85440063 326.73083496]
[118.98924255 311.84725952]
[117.12409210 296.96365356]
[115.25893402 282.08007812]
[113.39377594 267.19650269]
[111.52862549 252.31289673]
[109.66346741 237.42932129]
[107.79830933 222.54573059]
[105.93315887 207.66213989]
[104.06800079 192.77854919]
[102.20284271 177.89495850]
[100.33769226 163.01136780]
[98.47253418 148.12779236]
[96.60737610 133.24420166]
[94.74222565 118.36061096]
[83.36682892 109.38583374]
[81.56514740 95.00875854]
[90.37419128 83.50454712]
[88.50903320 68.62095642]
[86.64387512 53.73736954]
[84.77872467 38.85377884]
[75.38550568 26.12279320]
[81.48020172 12.53221035]
[79.61504364 -2.35137796]
[77.74989319 -17.23496628]
[66.28874207 -31.58242035]
[73.59846497 -47.48491669]
[61.16629028 -56.86994553]
[59.11033249 -71.94401550]
[68.13414001 -83.73836517]
[65.89850616 -98.57082367]
[63.66286850 -113.40328979]
[61.42723465 -128.23574829]
[46.73595428 -132.24650574]
[34.95023727 -141.89102173]
[28.11202431 -155.49833679]
[27.40608215 -170.71087646]
[32.95471954 -184.89299011]
[43.79659653 -195.58755493]
[58.05329895 -200.94165039]
[73.25476074 -200.02764893]
[86.76724243 -193.00392151]
[96.24962616 -181.08737183]
[100.05902100 -166.34259033]
[97.53543854 -151.32421875]
[89.11609650 -138.63429260]
[76.25969696 -130.47138977]
[78.49533081 -115.63892365]
[80.73096466 -100.80645752]
[82.96659851 -85.97399902]
[95.06594849 -77.36345673]
[97.54449463 -62.35307693]
[88.43092346 -49.72055054]
[98.01656342 -42.23001862]
[99.94651794 -29.81158638]
[92.63347626 -19.10012245]
[94.49863434 -4.21653366]
[96.36379242 10.66705418]
[105.62359619 22.33346748]
[99.66230774 36.98862457]
[101.52746582 51.87221146]
[103.39262390 66.75579834]
[105.25777435 81.63938904]
[116.63317108 90.61416626]
[118.43485260 104.99124146]
[109.62580872 116.49545288]
[111.49096680 131.37904358]
[113.35612488 146.26263428]
[115.22127533 161.14622498]
[117.08643341 176.02980042]
[118.95159149 190.91339111]
[120.81674194 205.79698181]
[122.68190002 220.68057251]
[124.54705811 235.56416321]
[126.41220856 250.44775391]
[128.27735901 265.33132935]
[130.14251709 280.21493530]
[132.00767517 295.09851074]
[133.87283325 309.98208618]
[135.73799133 324.86569214]
[137.60314941 339.74926758]
[149.79748535 349.44134521]
[151.47698975 364.56198120]
[142.16195679 376.12768555]
[144.02709961 391.01126099]
[145.89225769 405.89486694]
[147.75741577 420.77844238]
[149.62257385 435.66204834]
[151.48773193 450.54562378]
[153.35289001 465.42919922]
[155.21803284 480.31280518]
[166.75822449 470.73031616]
[181.49504089 473.52783203]
[188.72079468 486.67272949]
[183.18530273 500.61398315]
[168.91062927 505.22195435]
[156.26884460 497.14883423]
[156.26884460 512.14880371]
[156.26884460 527.14880371]
[164.00614929 540.94897461]
[156.26884460 553.67626953]
[156.26884460 568.67626953]
[156.26884460 583.67626953]
[156.26884460 598.67626953]
[162.31518555 614.51538086]
] def
/pairs [
[2 124]
[3 123]
[4 122]
[5 121]
[7 119]
[8 118]
[9 117]
[10 111]
[11 110]
[12 109]
[13 108]
[14 107]
[15 106]
[16 105]
[17 104]
[20 101]
[21 100]
[22 99]
[23 98]
[24 97]
[25 96]
[26 95]
[27 94]
[28 93]
[29 92]
[30 91]
[31 90]
[32 89]
[33 88]
[34 87]
[35 86]
[38 83]
[39 82]
[40 81]
[41 80]
[43 78]
[44 77]
[45 76]
[47 73]
[50 70]
[51 69]
[52 68]
[53 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF
