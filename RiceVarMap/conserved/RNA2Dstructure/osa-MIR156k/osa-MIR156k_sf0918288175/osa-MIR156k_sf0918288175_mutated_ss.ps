%!PS-Adobe-3.0 EPSF-3.0
%%Creator: PS_dot.c,v 1.38 2007/02/02 15:18:13 ivo Exp $, ViennaRNA-2.1.9
%%CreationDate: Thu Jul 16 15:13:51 2015
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 66 210 518 662
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: -d2 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  72 216 translate
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  72 6 mul size div dup scale
  size xmin sub xmax sub 2 div size ymin sub ymax sub 2 div
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
UUGAGAGUGAUGACAGAAGAGAGAGAGCACAACCCGACAGCAGCGACGACGGCGGUCGCUUCUGCCAGGGCCGUGUGCUCUCUGAUCUAUCUGUCAUUGCCGUCCA\
) def
/coor [
[87.10556793 389.31945801]
[83.74668121 373.63195801]
[94.02845001 361.31674194]
[94.02845001 346.31674194]
[83.34757996 335.99905396]
[83.13390350 320.78692627]
[94.02845001 309.65377808]
[94.02845001 294.65377808]
[94.02845001 279.65377808]
[94.02845001 264.65377808]
[94.02845001 249.65379333]
[94.02845001 234.65379333]
[94.02845001 219.65379333]
[94.02845001 204.65379333]
[94.02845001 189.65379333]
[94.02845001 174.65379333]
[94.02845001 159.65379333]
[93.80825806 144.65541077]
[93.36791229 129.66188049]
[92.92755890 114.66833496]
[83.73146057 100.71694946]
[91.66463470 86.01067352]
[90.78431702 71.03652954]
[89.90400696 56.06238556]
[89.02368927 41.08823776]
[88.14337921 26.11409187]
[87.26306152 11.13994694]
[86.38274384 -3.83419919]
[85.50243378 -18.80834579]
[84.62211609 -33.78248978]
[83.74180603 -48.75663757]
[71.84152222 -64.89645386]
[80.86478424 -81.89186096]
[79.10719299 -96.78852844]
[77.34959412 -111.68520355]
[63.45348358 -122.18581390]
[61.41225052 -139.14514160]
[71.99586487 -152.12275696]
[69.80171967 -166.96141052]
[67.60756683 -181.80006409]
[57.93484879 -194.32000732]
[63.72722244 -208.04217529]
[61.53306961 -222.88082886]
[59.33892059 -237.71948242]
[57.14477158 -252.55813599]
[54.95062256 -267.39678955]
[52.75646973 -282.23544312]
[39.34203339 -290.27203369]
[34.28068542 -305.06787109]
[39.96224594 -319.63681030]
[53.70404816 -327.09985352]
[69.01763916 -323.93316650]
[78.67240906 -311.63195801]
[78.10966492 -296.00451660]
[67.59513092 -284.42959595]
[69.78927612 -269.59094238]
[71.98342896 -254.75228882]
[74.17757416 -239.91363525]
[76.37172699 -225.07498169]
[78.56587982 -210.23632812]
[88.08165741 -198.77774048]
[82.44622040 -183.99421692]
[84.64037323 -169.15556335]
[86.83452606 -154.31689453]
[98.22323608 -148.09648132]
[103.99133301 -136.25421143]
[101.80408478 -123.06648254]
[92.24626923 -113.44279480]
[94.00386047 -98.54612732]
[95.76145935 -83.64945221]
[104.46707916 -77.93942261]
[108.59944153 -68.14256287]
[106.52893829 -57.48757553]
[98.71595001 -49.63695145]
[99.59626770 -34.66280365]
[100.47657776 -19.68865967]
[101.35689545 -4.71451330]
[102.23720551 10.25963306]
[103.11752319 25.23377800]
[103.99783325 40.20792389]
[104.87815094 55.18207169]
[105.75846100 70.15621948]
[106.63877869 85.13036346]
[114.91522980 93.46430206]
[115.43234253 105.19829559]
[107.92109680 114.22798920]
[108.36144257 129.22152710]
[108.80178833 144.21505737]
[112.22612762 152.85806274]
[109.02845001 159.65379333]
[109.02845001 174.65379333]
[109.02845001 189.65379333]
[109.02845001 204.65379333]
[109.02845001 219.65379333]
[109.02845001 234.65379333]
[109.02845001 249.65379333]
[109.02845001 264.65377808]
[109.02845001 279.65377808]
[109.02845001 294.65377808]
[109.02845001 309.65377808]
[119.92300415 320.78692627]
[119.70932770 335.99905396]
[109.02845001 346.31674194]
[109.02845001 361.31674194]
[119.31021881 373.63195801]
[115.95133972 389.31945801]
] def
/pairs [
[3 104]
[4 103]
[7 100]
[8 99]
[9 98]
[10 97]
[11 96]
[12 95]
[13 94]
[14 93]
[15 92]
[16 91]
[17 90]
[18 88]
[19 87]
[20 86]
[22 83]
[23 82]
[24 81]
[25 80]
[26 79]
[27 78]
[28 77]
[29 76]
[30 75]
[31 74]
[33 70]
[34 69]
[35 68]
[38 64]
[39 63]
[40 62]
[42 60]
[43 59]
[44 58]
[45 57]
[46 56]
[47 55]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF
