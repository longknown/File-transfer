%!PS-Adobe-3.0 EPSF-3.0
%%Creator: PS_dot.c,v 1.38 2007/02/02 15:18:13 ivo Exp $, ViennaRNA-2.1.9
%%CreationDate: Thu Jul 16 15:13:53 2015
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 66 210 518 662
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: -d2 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  72 216 translate
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  72 6 mul size div dup scale
  size xmin sub xmax sub 2 div size ymin sub ymax sub 2 div
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
GGAAAGAGCGAUAUUGGUGAGGUUCAAUCCGAUGAUUGGUUUUACAGCAGUGGUAAAAUCAGUAUCUGAUUGAGCCGCGCCAAUAUCUCUUCCUCU\
) def
/coor [
[99.60607147 338.35794067]
[98.15092468 323.42868042]
[96.69577789 308.49942017]
[95.24063110 293.57019043]
[91.38525391 287.09539795]
[93.98813629 278.13513184]
[93.01718903 263.16656494]
[89.93594360 259.29028320]
[89.38902283 253.38905334]
[92.50000000 247.20350647]
[92.50000000 232.20350647]
[92.50000000 217.20350647]
[92.50000000 202.20350647]
[92.50000000 187.20350647]
[92.50000000 172.20350647]
[92.50000000 157.20350647]
[92.50000000 142.20350647]
[92.50000000 127.20349884]
[92.50000000 112.20349884]
[85.67605591 100.00000000]
[92.50000000 87.79650116]
[92.50000000 72.79650116]
[92.50000000 57.79650116]
[92.50000000 42.79650116]
[92.50000000 27.79650116]
[92.50000000 12.79650021]
[92.50000000 -2.20349932]
[92.50000000 -17.20349884]
[92.50000000 -32.20349884]
[84.76270294 -46.00367355]
[92.50000000 -58.73094177]
[92.50000000 -73.73094177]
[92.50000000 -88.73094177]
[89.32257843 -97.50395203]
[92.75076294 -104.21470642]
[93.23648834 -119.20684052]
[93.72222137 -134.19897461]
[94.20794678 -149.19110107]
[94.69367218 -164.18324280]
[95.17940521 -179.17536926]
[95.66513062 -194.16751099]
[96.15086365 -209.15963745]
[96.63658905 -224.15177917]
[97.12231445 -239.14390564]
[97.60804749 -254.13604736]
[85.84078979 -264.43484497]
[83.49759674 -279.89587402]
[91.68485260 -293.21890259]
[106.53678894 -298.11318970]
[121.04077148 -292.26782227]
[128.34846497 -278.44277954]
[125.00939941 -263.16583252]
[112.60018158 -253.65031433]
[112.11444855 -238.65817261]
[111.62872314 -223.66604614]
[111.14299774 -208.67390442]
[110.65726471 -193.68177795]
[110.17153931 -178.68965149]
[109.68580627 -163.69750977]
[109.20008087 -148.70538330]
[108.71435547 -133.71324158]
[108.22862244 -118.72110748]
[107.74289703 -103.72897339]
[107.50000000 -88.73094177]
[107.50000000 -73.73094177]
[107.50000000 -58.73094177]
[115.23729706 -46.00367355]
[107.50000000 -32.20349884]
[107.50000000 -17.20349884]
[107.50000000 -2.20349932]
[107.50000000 12.79650021]
[107.50000000 27.79650116]
[107.50000000 42.79650116]
[107.50000000 57.79650116]
[107.50000000 72.79650116]
[107.50000000 87.79650116]
[114.32394409 100.00000000]
[107.50000000 112.20349884]
[107.50000000 127.20349884]
[107.50000000 142.20350647]
[107.50000000 157.20350647]
[107.50000000 172.20350647]
[107.50000000 187.20350647]
[107.50000000 202.20350647]
[107.50000000 217.20350647]
[107.50000000 232.20350647]
[107.50000000 247.20350647]
[107.98572540 262.19561768]
[108.95667267 277.16418457]
[110.16988373 292.11502075]
[111.62503052 307.04428101]
[113.08017731 321.97354126]
[114.53532410 336.90280151]
[124.50891113 349.92044067]
[117.97302246 364.96087646]
[101.65122223 366.55175781]
] def
/pairs [
[1 93]
[2 92]
[3 91]
[4 90]
[6 89]
[7 88]
[10 87]
[11 86]
[12 85]
[13 84]
[14 83]
[15 82]
[16 81]
[17 80]
[18 79]
[19 78]
[21 76]
[22 75]
[23 74]
[24 73]
[25 72]
[26 71]
[27 70]
[28 69]
[29 68]
[31 66]
[32 65]
[33 64]
[35 63]
[36 62]
[37 61]
[38 60]
[39 59]
[40 58]
[41 57]
[42 56]
[43 55]
[44 54]
[45 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF
