%!PS-Adobe-3.0 EPSF-3.0
%%Creator: PS_dot.c,v 1.38 2007/02/02 15:18:13 ivo Exp $, ViennaRNA-2.1.9
%%CreationDate: Thu Jul 16 15:13:51 2015
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 66 210 518 662
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: -d2 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  72 216 translate
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  72 6 mul size div dup scale
  size xmin sub xmax sub 2 div size ymin sub ymax sub 2 div
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
CGAUCAUCUUGUUGAGGGGAAUGUCGUCUGGCCUGAGAUCGUACCACAGUGGUGGGUACACGUGGACGGUCUCGGACCAGGCUUCAUUCCCCUCAACAACUCGUCGG\
) def
/coor [
[94.53730774 530.03509521]
[94.10104370 515.04144287]
[93.66477203 500.04779053]
[93.22850037 485.05413818]
[81.48664093 478.52267456]
[74.48307037 466.92886353]
[74.15996552 453.27896118]
[80.71063995 441.17547607]
[92.50000000 433.86642456]
[92.50000000 418.86642456]
[92.50000000 403.86642456]
[92.50000000 388.86642456]
[92.50000000 373.86642456]
[92.50000000 358.86642456]
[92.50000000 343.86642456]
[92.50000000 328.86642456]
[92.50000000 313.86642456]
[92.50000000 298.86642456]
[92.50000000 283.86642456]
[92.50000000 268.86642456]
[92.50000000 253.86643982]
[92.50000000 238.86643982]
[92.50000000 223.86643982]
[81.81912994 213.54875183]
[81.60544586 198.33662415]
[92.50000000 187.20350647]
[92.50000000 172.20350647]
[92.50000000 157.20350647]
[92.50000000 142.20350647]
[92.50000000 127.20349884]
[92.50000000 112.20349884]
[85.67605591 100.00000000]
[92.50000000 87.79650116]
[92.50000000 72.79650116]
[92.50000000 57.79650116]
[92.50000000 42.79650116]
[92.50000000 27.79650116]
[92.50000000 12.79650021]
[92.50000000 -2.20349932]
[92.50000000 -17.20349884]
[92.50000000 -32.20349884]
[92.50000000 -47.20349884]
[89.33161163 -55.94032669]
[92.72450256 -62.63818359]
[93.16077423 -77.63183594]
[93.59704590 -92.62549591]
[94.03331757 -107.61914825]
[91.12037659 -116.44442749]
[94.70664215 -123.04077148]
[95.57881165 -138.01539612]
[96.45098114 -152.99002075]
[84.95321655 -163.58885193]
[83.00949860 -179.10516357]
[91.53760529 -192.21263123]
[106.51081085 -196.72229004]
[120.85923004 -190.50483704]
[127.80798340 -176.49595642]
[124.07608032 -161.31021118]
[111.42560577 -152.11784363]
[110.55343628 -137.14321899]
[109.68125916 -122.16860199]
[109.02696991 -107.18287659]
[108.59069824 -92.18922424]
[108.15442657 -77.19556427]
[107.71815491 -62.20191193]
[107.50000000 -47.20349884]
[107.50000000 -32.20349884]
[107.50000000 -17.20349884]
[107.50000000 -2.20349932]
[107.50000000 12.79650021]
[107.50000000 27.79650116]
[107.50000000 42.79650116]
[107.50000000 57.79650116]
[107.50000000 72.79650116]
[107.50000000 87.79650116]
[114.32394409 100.00000000]
[107.50000000 112.20349884]
[107.50000000 127.20349884]
[107.50000000 142.20350647]
[107.50000000 157.20350647]
[107.50000000 172.20350647]
[107.50000000 187.20350647]
[118.39455414 198.33662415]
[118.18087006 213.54875183]
[107.50000000 223.86643982]
[107.50000000 238.86643982]
[107.50000000 253.86643982]
[107.50000000 268.86642456]
[107.50000000 283.86642456]
[107.50000000 298.86642456]
[107.50000000 313.86642456]
[107.50000000 328.86642456]
[107.50000000 343.86642456]
[107.50000000 358.86642456]
[107.50000000 373.86642456]
[107.50000000 388.86642456]
[107.50000000 403.86642456]
[107.50000000 418.86642456]
[107.50000000 433.86642456]
[121.27544403 443.55258179]
[126.56545258 459.36596680]
[121.49269104 475.07687378]
[108.22215271 484.61788940]
[108.65842438 499.61154175]
[109.09469604 514.60516357]
[109.53096771 529.59881592]
[112.28098297 548.78442383]
] def
/pairs [
[1 106]
[2 105]
[3 104]
[4 103]
[9 99]
[10 98]
[11 97]
[12 96]
[13 95]
[14 94]
[15 93]
[16 92]
[17 91]
[18 90]
[19 89]
[20 88]
[21 87]
[22 86]
[23 85]
[26 82]
[27 81]
[28 80]
[29 79]
[30 78]
[31 77]
[33 75]
[34 74]
[35 73]
[36 72]
[37 71]
[38 70]
[39 69]
[40 68]
[41 67]
[42 66]
[44 65]
[45 64]
[46 63]
[47 62]
[49 61]
[50 60]
[51 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF
