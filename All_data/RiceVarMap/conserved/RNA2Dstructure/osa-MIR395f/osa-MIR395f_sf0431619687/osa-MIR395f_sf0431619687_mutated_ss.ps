%!PS-Adobe-3.0 EPSF-3.0
%%Creator: PS_dot.c,v 1.38 2007/02/02 15:18:13 ivo Exp $, ViennaRNA-2.1.9
%%CreationDate: Thu Jul 16 15:13:58 2015
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 66 210 518 662
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: -d2 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  72 216 translate
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  72 6 mul size div dup scale
  size xmin sub xmax sub 2 div size ymin sub ymax sub 2 div
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
UUAUCGCGGGUUCCCUUCAAUCACUUCACAUGGUACUAUUUCAAGGCCUACUAUGUGAAUUAUUUGGGGGAACUCUCGAUGU\
) def
/coor [
[86.47970581 329.32205200]
[92.52604675 313.48291016]
[92.52604675 298.48291016]
[92.52604675 283.48291016]
[92.52604675 268.48291016]
[92.52604675 253.48291016]
[84.78874969 240.75564575]
[92.52604675 226.95545959]
[92.52604675 211.95545959]
[92.52604675 196.95545959]
[92.52604675 181.95545959]
[92.52604675 166.95545959]
[92.52604675 151.95545959]
[92.52604675 136.95545959]
[92.52604675 121.95546722]
[92.52604675 106.95546722]
[89.31142426 99.32439423]
[92.82065582 91.39053345]
[93.38827515 76.40127563]
[93.95589447 61.41201782]
[81.06359863 53.18184280]
[74.06799316 39.69264984]
[74.75894928 24.61322784]
[82.85086823 11.98877430]
[96.08624268 5.15573263]
[96.65386963 -9.83352375]
[97.22148895 -24.82278061]
[97.78910828 -39.81203461]
[98.35673523 -54.80129242]
[98.92435455 -69.79055023]
[99.49197388 -84.77980804]
[100.05960083 -99.76905823]
[100.62722015 -114.75831604]
[101.19483948 -129.74757385]
[101.76246643 -144.73683167]
[101.47860718 -159.73414612]
[100.34416962 -174.69119263]
[88.19387817 -184.79791260]
[86.83206940 -200.54341125]
[97.06668854 -212.58618164]
[112.82571411 -213.78143311]
[124.75959778 -203.42007446]
[125.78817749 -187.64929199]
[115.30121613 -175.82562256]
[116.43564606 -160.86857605]
[119.10832977 -158.21340942]
[120.49142456 -154.02960205]
[119.83248138 -149.00770569]
[116.75172424 -144.16920471]
[116.18409729 -129.17994690]
[115.61647797 -114.19069672]
[115.04885864 -99.20143890]
[114.48123169 -84.21218109]
[113.91361237 -69.22292328]
[113.34598541 -54.23366928]
[112.77836609 -39.24441528]
[112.21074677 -24.25515747]
[111.64311981 -9.26590157]
[111.07550049 5.72335482]
[123.75619507 13.53780174]
[130.87016296 26.73808098]
[130.41871643 41.82657242]
[122.42297363 54.74806213]
[108.94515228 61.97964096]
[108.37753296 76.96889496]
[107.80990601 91.95815277]
[107.52604675 106.95546722]
[107.52604675 121.95546722]
[107.52604675 136.95545959]
[107.52604675 151.95545959]
[107.52604675 166.95545959]
[107.52604675 181.95545959]
[107.52604675 196.95545959]
[107.52604675 211.95545959]
[107.52604675 226.95545959]
[115.26334381 240.75564575]
[107.52604675 253.48291016]
[107.52604675 268.48291016]
[107.52604675 283.48291016]
[107.52604675 298.48291016]
[107.52604675 313.48291016]
[113.57238770 329.32205200]
] def
/pairs [
[2 81]
[3 80]
[4 79]
[5 78]
[6 77]
[8 75]
[9 74]
[10 73]
[11 72]
[12 71]
[13 70]
[14 69]
[15 68]
[16 67]
[18 66]
[19 65]
[20 64]
[25 59]
[26 58]
[27 57]
[28 56]
[29 55]
[30 54]
[31 53]
[32 52]
[33 51]
[34 50]
[35 49]
[36 45]
[37 44]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF
