%!PS-Adobe-3.0 EPSF-3.0
%%Creator: PS_dot.c,v 1.38 2007/02/02 15:18:13 ivo Exp $, ViennaRNA-2.1.9
%%CreationDate: Thu Jul 16 15:13:57 2015
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 66 210 518 662
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: -d2 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  72 216 translate
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  72 6 mul size div dup scale
  size xmin sub xmax sub 2 div size ymin sub ymax sub 2 div
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
GUAUUAUCAAGAGUUCUCUUUAAGCACUUCAUACGACACCAUUAUUUAUAGGGUUGUUGUGAAGUGUUUGGAGGAACUCUCAGUGUCAU\
) def
/coor [
[76.64376068 537.01361084]
[63.02585983 530.45275879]
[51.94792938 520.16827393]
[44.39501190 507.07458496]
[41.03870392 492.33596802]
[42.17744827 477.26300049]
[47.70998764 463.19592285]
[57.14437485 451.38562012]
[69.64170837 442.88220215]
[84.09073639 438.44180298]
[84.09073639 423.44180298]
[84.09073639 408.44180298]
[84.09073639 393.44180298]
[84.09073639 378.44180298]
[84.09073639 363.44180298]
[84.09073639 348.44180298]
[80.87215424 341.60476685]
[84.36166382 332.92059326]
[84.88515472 317.92974854]
[85.40864563 302.93887329]
[85.93213654 287.94802856]
[86.45563507 272.95715332]
[86.97912598 257.96627808]
[87.50261688 242.97543335]
[88.02610779 227.98457336]
[88.54959869 212.99369812]
[89.07309723 198.00283813]
[89.59658813 183.01197815]
[90.12007904 168.02111816]
[90.64356995 153.03025818]
[91.16706085 138.03939819]
[91.69055939 123.04853058]
[92.21405029 108.05766296]
[92.47583771 93.05995178]
[92.47583771 78.05995178]
[92.47583771 63.05995178]
[92.47583771 48.05995178]
[89.29152679 39.25928497]
[92.74675751 32.53874207]
[93.27024841 17.54788017]
[80.20282745 9.47706413]
[72.93565369 -4.05377865]
[73.42355347 -19.40491867]
[81.53529358 -32.44697952]
[95.08884430 -39.67170715]
[110.43838501 -39.13568878]
[123.45494843 -30.98311234]
[130.63716125 -17.40697670]
[130.05303955 -2.05919600]
[121.85969543 10.93175411]
[108.26111603 18.07137299]
[107.73761749 33.06223679]
[107.47583771 48.05995178]
[107.47583771 63.05995178]
[107.47583771 78.05995178]
[107.47583771 93.05995178]
[110.68209076 100.66373444]
[107.20491028 108.58116150]
[106.68141937 123.57202148]
[106.15792847 138.56288147]
[105.63442993 153.55374146]
[105.11093903 168.54460144]
[104.58744812 183.53547668]
[104.06395721 198.52633667]
[103.54046631 213.51719666]
[103.01696777 228.50805664]
[102.49347687 243.49891663]
[101.96998596 258.48977661]
[101.44649506 273.48065186]
[100.92300415 288.47149658]
[100.39950562 303.46237183]
[99.87601471 318.45324707]
[99.35252380 333.44409180]
[99.09073639 348.44180298]
[99.09073639 363.44180298]
[99.09073639 378.44180298]
[99.09073639 393.44180298]
[99.09073639 408.44180298]
[99.09073639 423.44180298]
[99.09073639 438.44180298]
[113.53976440 442.88220215]
[126.03710175 451.38562012]
[135.47148132 463.19592285]
[141.00402832 477.26300049]
[142.14277649 492.33596802]
[138.78646851 507.07458496]
[131.23355103 520.16827393]
[120.15561676 530.45275879]
[106.53771210 537.01361084]
] def
/pairs [
[10 80]
[11 79]
[12 78]
[13 77]
[14 76]
[15 75]
[16 74]
[18 73]
[19 72]
[20 71]
[21 70]
[22 69]
[23 68]
[24 67]
[25 66]
[26 65]
[27 64]
[28 63]
[29 62]
[30 61]
[31 60]
[32 59]
[33 58]
[34 56]
[35 55]
[36 54]
[37 53]
[39 52]
[40 51]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF
