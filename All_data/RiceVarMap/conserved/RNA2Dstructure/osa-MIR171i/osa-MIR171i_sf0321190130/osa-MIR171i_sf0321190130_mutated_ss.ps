%!PS-Adobe-3.0 EPSF-3.0
%%Creator: PS_dot.c,v 1.38 2007/02/02 15:18:13 ivo Exp $, ViennaRNA-2.1.9
%%CreationDate: Thu Jul 16 15:13:53 2015
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 66 210 518 662
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: -d2 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  72 216 translate
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  72 6 mul size div dup scale
  size xmin sub xmax sub 2 div size ymin sub ymax sub 2 div
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
UAAAAAGAGGUAUUGGCUUGCCUCAAUCCGAAGGCAUGGCUGAUUACAGGCACCUCGACCGAUCUAGCGCAUGCAGCCAUGUUUCUUGGAUUGAGCCGCGUCAAUAUCUCUCCUUGCUUC\
) def
/coor [
[129.64212036 697.24584961]
[124.01023865 683.15167236]
[123.85398865 667.97473145]
[129.19450378 653.76757812]
[139.30950928 642.45159912]
[152.83105469 635.55725098]
[151.27603149 620.63806152]
[149.72102356 605.71887207]
[148.16600037 590.79968262]
[146.61099243 575.88049316]
[145.05596924 560.96130371]
[143.50096130 546.04217529]
[141.94593811 531.12298584]
[140.39093018 516.20379639]
[138.83590698 501.28460693]
[137.28089905 486.36541748]
[135.72587585 471.44625854]
[126.71086121 459.58966064]
[132.97584534 445.06173706]
[131.42082214 430.14254761]
[122.40580750 418.28598022]
[128.67079163 403.75802612]
[127.11576843 388.83886719]
[125.56075287 373.91967773]
[124.00573730 359.00048828]
[122.45072174 344.08132935]
[120.89570618 329.16213989]
[119.34069061 314.24295044]
[117.78567505 299.32379150]
[116.23065948 284.40460205]
[114.67564392 269.48541260]
[112.92708588 254.58769226]
[110.98528290 239.71389771]
[109.04347992 224.84011841]
[107.10167694 209.96633911]
[105.15987396 195.09255981]
[103.21807098 180.21878052]
[101.27626801 165.34498596]
[99.33446503 150.47120667]
[97.39266205 135.59742737]
[95.45085907 120.72364807]
[93.50905609 105.84986115]
[91.12615204 103.73872375]
[89.50099182 100.67287445]
[89.00390625 96.94791412]
[89.88415527 92.99749756]
[92.22071075 89.34294891]
[91.83130646 74.34800720]
[83.73834991 60.75334930]
[91.14263153 47.82950211]
[90.75322723 32.83455658]
[81.91174316 23.33536720]
[81.96254730 10.76078415]
[90.32809448 1.91877377]
[90.32809448 -13.08122635]
[82.59078979 -26.88139915]
[90.32809448 -39.60866928]
[90.32809448 -54.60866928]
[81.66439056 -68.53247070]
[89.62851715 -82.86790466]
[106.02766418 -82.86790466]
[113.99179840 -68.53247070]
[105.32809448 -54.60866928]
[105.32809448 -39.60866928]
[113.06539154 -26.88139915]
[105.32809448 -13.08122635]
[105.32809448 1.91877377]
[114.92807770 16.54723930]
[105.74816895 32.44514847]
[106.13758087 47.44009018]
[114.20268250 59.96220779]
[106.82624817 73.95859528]
[107.21566010 88.95353699]
[108.38283539 103.90805817]
[110.32463837 118.78184509]
[112.26644135 133.65562439]
[114.20825195 148.52940369]
[116.15005493 163.40318298]
[118.09185791 178.27697754]
[120.03366089 193.15075684]
[121.97546387 208.02453613]
[123.91726685 222.89831543]
[125.85906982 237.77209473]
[127.80087280 252.64588928]
[132.06068420 260.86621094]
[129.59483337 267.93041992]
[131.14984131 282.84957886]
[132.70486450 297.76876831]
[134.25987244 312.68795776]
[135.81489563 327.60711670]
[137.36990356 342.52630615]
[138.92492676 357.44549561]
[140.47993469 372.36465454]
[142.03495789 387.28384399]
[143.58996582 402.20303345]
[152.71621704 415.12673950]
[146.34001160 428.58752441]
[147.89501953 443.50671387]
[157.02127075 456.43041992]
[150.64506531 469.89123535]
[152.20007324 484.81042480]
[153.75509644 499.72958374]
[155.31010437 514.64874268]
[156.86512756 529.56793213]
[158.42013550 544.48712158]
[159.97515869 559.40631104]
[161.53016663 574.32550049]
[163.08518982 589.24468994]
[164.64019775 604.16387939]
[166.19522095 619.08300781]
[167.75022888 634.00219727]
[182.40289307 637.96002197]
[194.63404846 646.94683838]
[202.78955078 659.74731445]
[205.76641846 674.63031006]
[203.16207886 689.58294678]
[195.32872009 702.58306885]
[183.32575989 711.87249756]
[168.77648926 716.19488525]
[153.64859009 714.96569824]
] def
/pairs [
[6 111]
[7 110]
[8 109]
[9 108]
[10 107]
[11 106]
[12 105]
[13 104]
[14 103]
[15 102]
[16 101]
[17 100]
[19 98]
[20 97]
[22 95]
[23 94]
[24 93]
[25 92]
[26 91]
[27 90]
[28 89]
[29 88]
[30 87]
[31 86]
[32 84]
[33 83]
[34 82]
[35 81]
[36 80]
[37 79]
[38 78]
[39 77]
[40 76]
[41 75]
[42 74]
[47 73]
[48 72]
[50 70]
[51 69]
[54 67]
[55 66]
[57 64]
[58 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF
