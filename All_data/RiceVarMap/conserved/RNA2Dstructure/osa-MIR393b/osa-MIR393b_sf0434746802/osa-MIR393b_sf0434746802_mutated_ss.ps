%!PS-Adobe-3.0 EPSF-3.0
%%Creator: PS_dot.c,v 1.38 2007/02/02 15:18:13 ivo Exp $, ViennaRNA-2.1.9
%%CreationDate: Thu Jul 16 15:13:57 2015
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 66 210 518 662
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: -d2 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  72 216 translate
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  72 6 mul size div dup scale
  size xmin sub xmax sub 2 div size ymin sub ymax sub 2 div
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
UCGGCCUGAGGAAACUAGUGGAGGACUCCAAAGGGAUCGCAUUGAUCUGGCUAGCUAUCUCGAUCGAUCGCCUCAUCGAUCGACGACGACGUGCGAGAUCGAUCAGUGCAAUCCCUUUGGAAUUUUCCUCUU\
) def
/coor [
[-35.11078262 587.20202637]
[-35.70593643 602.31829834]
[-40.94504547 616.51007080]
[-50.31482697 628.38702393]
[-62.89733124 636.78558350]
[-77.45984650 640.88293457]
[-92.57569885 640.27764893]
[-106.76397705 635.02905273]
[-118.63465881 625.65130615]
[-127.02478790 613.06317139]
[-131.11236572 598.49792480]
[-130.49696350 583.38244629]
[-125.23883820 569.19769287]
[-115.85314941 557.33331299]
[-103.25939941 548.95159912]
[-88.69140625 544.87377930]
[-73.57637787 545.49932861]
[-68.37216187 531.43109131]
[-71.21315002 516.80993652]
[-59.16851807 506.55139160]
[-53.96429825 492.48312378]
[-48.76007843 478.41485596]
[-43.55586243 464.34658813]
[-38.35164261 450.27832031]
[-33.14742279 436.21005249]
[-35.98841476 421.58892822]
[-23.94377899 411.33038330]
[-18.73955917 397.26211548]
[-13.53534031 383.19384766]
[-8.33112144 369.12557983]
[-3.12690163 355.05734253]
[2.07731771 340.98907471]
[7.28153706 326.92080688]
[12.48575687 312.85253906]
[17.68997574 298.78427124]
[22.89419556 284.71600342]
[28.09841537 270.64773560]
[25.25742340 256.02658081]
[37.30205917 245.76805115]
[42.50627518 231.69979858]
[47.71049500 217.63153076]
[52.91471481 203.56326294]
[58.11893463 189.49499512]
[63.32315445 175.42672729]
[68.52737427 161.35845947]
[73.73159027 147.29019165]
[78.93581390 133.22193909]
[78.29998016 125.78629303]
[84.43266296 118.88528442]
[89.96770477 104.94386292]
[95.33770752 90.93804169]
[100.54193115 76.86977386]
[98.07317352 61.24237061]
[109.74557495 51.99010086]
[114.94979095 37.92183685]
[107.34609985 22.21818161]
[113.29041290 6.17271328]
[128.67298889 -0.51799536]
[133.54348755 -14.70525360]
[138.24607849 -28.94904518]
[142.78013611 -43.24737930]
[147.31417847 -57.54571533]
[146.93107605 -66.76997375]
[152.12785339 -72.12595367]
[156.99835205 -86.31320953]
[161.86883545 -100.50047302]
[166.73933411 -114.68772888]
[171.60981750 -128.87498474]
[176.48031616 -143.06224060]
[181.35079956 -157.24951172]
[174.18531799 -171.33607483]
[179.15864563 -186.33746338]
[193.32017517 -193.35360718]
[208.26814270 -188.22196960]
[215.13418579 -173.98704529]
[209.84478760 -159.09416199]
[195.53807068 -152.37901306]
[190.66757202 -138.19175720]
[185.79707336 -124.00449371]
[180.92658997 -109.81723785]
[176.05609131 -95.62997437]
[171.18560791 -81.44271851]
[166.31510925 -67.25546265]
[161.61251831 -53.01166916]
[157.07846069 -38.71333313]
[152.54441833 -24.41499710]
[153.53068542 -17.01767921]
[147.73074341 -9.83476162]
[142.86026001 4.35249662]
[150.10342407 15.07601452]
[149.81367493 28.20852470]
[141.87214661 38.91574478]
[129.01805115 43.12605286]
[123.81383514 57.19432068]
[126.65483093 71.81546783]
[114.61019135 82.07399750]
[109.40597534 96.14226532]
[109.78091431 104.27742004]
[103.90912628 110.47890472]
[98.37408447 124.42033386]
[93.00408173 138.42614746]
[87.79985809 152.49441528]
[82.59564209 166.56268311]
[77.39141846 180.63095093]
[72.18720245 194.69921875]
[66.98297882 208.76748657]
[61.77876282 222.83573914]
[56.57454300 236.90400696]
[51.37032318 250.97227478]
[53.83907318 266.59967041]
[42.16667938 275.85195923]
[36.96245956 289.92022705]
[31.75824165 303.98849487]
[26.55402184 318.05676270]
[21.34980202 332.12503052]
[16.14558411 346.19326782]
[10.94136429 360.26153564]
[5.73714447 374.32980347]
[0.53292525 388.39807129]
[-4.67129421 402.46633911]
[-9.87551308 416.53460693]
[-7.40676212 432.16201782]
[-19.07915688 441.41427612]
[-24.28337479 455.48254395]
[-29.48759460 469.55081177]
[-34.69181442 483.61907959]
[-39.89603424 497.68734741]
[-45.10025406 511.75561523]
[-42.63150024 527.38299561]
[-54.30389404 536.63531494]
[-59.50811386 550.70355225]
[-47.62487030 560.06536865]
] def
/pairs [
[17 131]
[18 130]
[20 128]
[21 127]
[22 126]
[23 125]
[24 124]
[25 123]
[27 121]
[28 120]
[29 119]
[30 118]
[31 117]
[32 116]
[33 115]
[34 114]
[35 113]
[36 112]
[37 111]
[39 109]
[40 108]
[41 107]
[42 106]
[43 105]
[44 104]
[45 103]
[46 102]
[47 101]
[49 100]
[50 99]
[51 97]
[52 96]
[54 94]
[55 93]
[58 89]
[59 88]
[60 86]
[61 85]
[62 84]
[64 83]
[65 82]
[66 81]
[67 80]
[68 79]
[69 78]
[70 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF
