%!PS-Adobe-3.0 EPSF-3.0
%%Creator: PS_dot.c,v 1.38 2007/02/02 15:18:13 ivo Exp $, ViennaRNA-2.1.9
%%CreationDate: Thu Jul 16 15:13:54 2015
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 66 210 518 662
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: -d2 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  72 216 translate
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  72 6 mul size div dup scale
  size xmin sub xmax sub 2 div size ymin sub ymax sub 2 div
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
CUUGUUGCGGGUGCAGCGUCAUCAAGAUUCACGUGUGCCGCACGGCACACGUAUCGGUUUUCAAGUGUAGUCAUCGUGCGUGAAUCUUGAUGAUGCUACACCAGCAAAGAG\
) def
/coor [
[92.74871063 566.21423340]
[92.74871063 551.21423340]
[92.74871063 536.21423340]
[85.01140594 523.48693848]
[92.74871063 509.68676758]
[92.74871063 494.68676758]
[92.74871063 479.68676758]
[92.74871063 464.68676758]
[85.01140594 451.95950317]
[92.74871063 438.15933228]
[92.74871063 423.15933228]
[92.74871063 408.15933228]
[92.74871063 393.15933228]
[85.01140594 380.43206787]
[92.74871063 366.63186646]
[92.74871063 351.63186646]
[92.74871063 336.63186646]
[92.74871063 321.63186646]
[92.74871063 306.63186646]
[92.74871063 291.63186646]
[92.74871063 276.63186646]
[92.74871063 261.63186646]
[92.74871063 246.63188171]
[92.74871063 231.63188171]
[92.74871063 216.63188171]
[92.74871063 201.63188171]
[92.74871063 186.63188171]
[92.74871063 171.63188171]
[92.74871063 156.63188171]
[92.74871063 141.63188171]
[92.74871063 126.63188171]
[92.74871063 111.63188171]
[86.81466675 97.85555267]
[75.91476440 87.55059814]
[65.01485443 77.24565125]
[54.11495209 66.94069672]
[43.21504974 56.63573837]
[32.31514359 46.33078766]
[21.41523933 36.02583313]
[5.34542656 32.75579071]
[0.39976698 17.12017441]
[11.66593075 5.20356560]
[27.55425453 9.26474857]
[31.72019196 25.12592697]
[42.62009811 35.43088150]
[53.52000046 45.73583603]
[64.41990662 56.04079056]
[75.31980896 66.34574127]
[86.21971893 76.65069580]
[97.11962128 86.95565033]
[111.94146729 84.65070343]
[119.19725037 71.52234650]
[126.45303345 58.39399719]
[127.90314484 49.22605133]
[134.10089111 45.00334930]
[141.72201538 32.08366013]
[149.34315491 19.16397095]
[156.96427917 6.24428082]
[147.79576111 -5.88035202]
[143.96989441 -20.59195137]
[146.07008362 -35.64710236]
[153.77606201 -48.75001144]
[165.91275024 -57.90256882]
[180.62936401 -61.70908737]
[195.68174744 -59.58909225]
[208.77450562 -51.86587143]
[217.91108704 -39.71715927]
[221.69824219 -24.99554634]
[219.55845642 -9.94597149]
[211.81802368 3.13661528]
[199.65730286 12.25721359]
[184.93070984 16.02499962]
[169.88397217 13.86541080]
[162.26283264 26.78510094]
[154.64170837 39.70478821]
[147.02058411 52.62447739]
[139.58139038 65.64978027]
[132.32560730 78.77812958]
[125.06982422 91.90648651]
[107.74871063 111.63188171]
[107.74871063 126.63188171]
[107.74871063 141.63188171]
[107.74871063 156.63188171]
[107.74871063 171.63188171]
[107.74871063 186.63188171]
[107.74871063 201.63188171]
[107.74871063 216.63188171]
[107.74871063 231.63188171]
[107.74871063 246.63188171]
[107.74871063 261.63186646]
[107.74871063 276.63186646]
[107.74871063 291.63186646]
[107.74871063 306.63186646]
[107.74871063 321.63186646]
[107.74871063 336.63186646]
[107.74871063 351.63186646]
[107.74871063 366.63186646]
[115.48600769 380.43206787]
[107.74871063 393.15933228]
[107.74871063 408.15933228]
[107.74871063 423.15933228]
[107.74871063 438.15933228]
[115.48600769 451.95950317]
[107.74871063 464.68676758]
[107.74871063 479.68676758]
[107.74871063 494.68676758]
[107.74871063 509.68676758]
[115.48600769 523.48693848]
[107.74871063 536.21423340]
[107.74871063 551.21423340]
[107.74871063 566.21423340]
] def
/pairs [
[1 111]
[2 110]
[3 109]
[5 107]
[6 106]
[7 105]
[8 104]
[10 102]
[11 101]
[12 100]
[13 99]
[15 97]
[16 96]
[17 95]
[18 94]
[19 93]
[20 92]
[21 91]
[22 90]
[23 89]
[24 88]
[25 87]
[26 86]
[27 85]
[28 84]
[29 83]
[30 82]
[31 81]
[32 80]
[33 50]
[34 49]
[35 48]
[36 47]
[37 46]
[38 45]
[39 44]
[51 79]
[52 78]
[53 77]
[55 76]
[56 75]
[57 74]
[58 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF
