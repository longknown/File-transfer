%!PS-Adobe-3.0 EPSF-3.0
%%Creator: PS_dot.c,v 1.38 2007/02/02 15:18:13 ivo Exp $, ViennaRNA-2.1.9
%%CreationDate: Thu Jul 16 15:13:58 2015
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 66 210 518 662
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: -d2 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  72 216 translate
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  72 6 mul size div dup scale
  size xmin sub xmax sub 2 div size ymin sub ymax sub 2 div
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
GAGUUCCCUUCAAGCACUUCACGUGACACUAUUUCAAUGUCUAUUAUGUGAAGUGUUUGGGGGAACUC\
) def
/coor [
[92.53083038 226.99597168]
[92.53083038 211.99597168]
[92.53083038 196.99597168]
[92.53083038 181.99597168]
[92.53083038 166.99597168]
[92.53083038 151.99597168]
[92.53083038 136.99597168]
[92.53083038 121.99596405]
[92.53083038 106.99596405]
[89.29442596 99.29338837]
[92.88782501 91.31713104]
[93.57054901 76.33267975]
[94.25326538 61.34822464]
[94.93598175 46.36376953]
[95.61870575 31.37931442]
[96.30142212 16.39485931]
[96.98413849 1.41040397]
[97.66686249 -13.57405090]
[98.34957886 -28.55850601]
[99.03229523 -43.54296112]
[99.71501923 -58.52741623]
[100.39773560 -73.51187134]
[101.08045197 -88.49633026]
[101.76317596 -103.48078156]
[102.44589233 -118.46524048]
[103.12860870 -133.44969177]
[92.88567352 -150.54374695]
[103.20408630 -166.65301514]
[102.52136993 -181.63748169]
[89.12557220 -189.28967285]
[82.01366425 -202.97998047]
[83.45504761 -218.33985901]
[92.98976135 -230.46803284]
[107.57532501 -235.49446106]
[122.55753326 -231.81520081]
[133.15562439 -220.60430908]
[135.98777771 -205.43913269]
[130.15026855 -191.15882874]
[117.50582123 -182.32019043]
[118.18853760 -167.33573914]
[126.61302948 -160.85948181]
[129.97538757 -150.54374695]
[126.85974121 -139.91740417]
[118.11306763 -132.76696777]
[117.43035126 -117.78251648]
[116.74762726 -102.79806519]
[116.06491089 -87.81360626]
[115.38218689 -72.82915497]
[114.69947052 -57.84469604]
[114.01675415 -42.86024094]
[113.33403015 -27.87578773]
[112.65131378 -12.89133263]
[111.96859741 2.09312296]
[111.28587341 17.07757759]
[110.60315704 32.06203461]
[109.92044067 47.04648972]
[109.23771667 62.03094482]
[108.55500031 77.01539612]
[107.87228394 91.99985504]
[107.53083038 106.99596405]
[107.53083038 121.99596405]
[107.53083038 136.99597168]
[107.53083038 151.99597168]
[107.53083038 166.99597168]
[107.53083038 181.99597168]
[107.53083038 196.99597168]
[107.53083038 211.99597168]
[107.53083038 226.99597168]
] def
/pairs [
[1 68]
[2 67]
[3 66]
[4 65]
[5 64]
[6 63]
[7 62]
[8 61]
[9 60]
[11 59]
[12 58]
[13 57]
[14 56]
[15 55]
[16 54]
[17 53]
[18 52]
[19 51]
[20 50]
[21 49]
[22 48]
[23 47]
[24 46]
[25 45]
[26 44]
[28 40]
[29 39]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF
