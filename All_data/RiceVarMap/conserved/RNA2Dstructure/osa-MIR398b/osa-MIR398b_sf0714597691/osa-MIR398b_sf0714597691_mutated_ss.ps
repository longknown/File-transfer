%!PS-Adobe-3.0 EPSF-3.0
%%Creator: PS_dot.c,v 1.38 2007/02/02 15:18:13 ivo Exp $, ViennaRNA-2.1.9
%%CreationDate: Thu Jul 16 15:13:58 2015
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 66 210 518 662
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: -d2 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  72 216 translate
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  72 6 mul size div dup scale
  size xmin sub xmax sub 2 div size ymin sub ymax sub 2 div
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
GGAGUUCCUACAGGGGCGAGAUGGGAACACACGGUGAUGAGGCGGUCUGGUCUUUCGUGUGUUCUCAGGUCGCCCCUGCCGGGACUCU\
) def
/coor [
[92.50000000 379.22729492]
[92.50000000 364.22729492]
[92.50000000 349.22729492]
[92.50000000 334.22729492]
[92.50000000 319.22729492]
[92.50000000 304.22729492]
[92.50000000 289.22729492]
[92.50000000 274.22729492]
[81.81912994 263.90960693]
[81.60544586 248.69746399]
[92.50000000 237.56434631]
[92.50000000 222.56434631]
[92.50000000 207.56434631]
[92.50000000 192.56434631]
[92.50000000 177.56434631]
[92.50000000 162.56434631]
[92.50000000 147.56434631]
[92.50000000 132.56434631]
[92.50000000 117.56434631]
[82.32884216 107.24475861]
[82.32884216 92.75524139]
[92.50000000 82.43565369]
[92.50000000 67.43565369]
[92.50000000 52.43565369]
[92.50000000 37.43565369]
[92.50000000 22.43565369]
[92.50000000 7.43565369]
[92.50000000 -7.56434631]
[92.50000000 -22.56434631]
[92.50000000 -37.56434631]
[92.50000000 -52.56434631]
[92.50000000 -67.56434631]
[92.50000000 -82.56434631]
[92.50000000 -97.56434631]
[82.89861298 -113.15498352]
[91.99416351 -128.05046082]
[91.46479034 -143.04112244]
[90.93541718 -158.03178406]
[82.71591187 -171.55029297]
[89.99922180 -184.54269409]
[89.46985626 -199.53335571]
[78.75986481 -211.47804260]
[81.56301880 -227.27430725]
[95.72898102 -234.80459595]
[110.39082336 -228.29231262]
[114.30125427 -212.73313904]
[104.46051025 -200.06272888]
[104.98988342 -185.07206726]
[113.17152405 -172.62577820]
[105.92607117 -158.56114197]
[106.45544434 -143.57049561]
[106.98481750 -128.57983398]
[115.68975830 -119.98101807]
[116.12532043 -107.34886932]
[107.50000000 -97.56434631]
[107.50000000 -82.56434631]
[107.50000000 -67.56434631]
[107.50000000 -52.56434631]
[107.50000000 -37.56434631]
[107.50000000 -22.56434631]
[107.50000000 -7.56434631]
[107.50000000 7.43565369]
[107.50000000 22.43565369]
[107.50000000 37.43565369]
[107.50000000 52.43565369]
[107.50000000 67.43565369]
[107.50000000 82.43565369]
[117.67115784 92.75524139]
[117.67115784 107.24475861]
[107.50000000 117.56434631]
[107.50000000 132.56434631]
[107.50000000 147.56434631]
[107.50000000 162.56434631]
[107.50000000 177.56434631]
[107.50000000 192.56434631]
[107.50000000 207.56434631]
[107.50000000 222.56434631]
[107.50000000 237.56434631]
[118.39455414 248.69746399]
[118.18087006 263.90960693]
[107.50000000 274.22729492]
[107.50000000 289.22729492]
[107.50000000 304.22729492]
[107.50000000 319.22729492]
[107.50000000 334.22729492]
[107.50000000 349.22729492]
[107.50000000 364.22729492]
[107.50000000 379.22729492]
] def
/pairs [
[1 88]
[2 87]
[3 86]
[4 85]
[5 84]
[6 83]
[7 82]
[8 81]
[11 78]
[12 77]
[13 76]
[14 75]
[15 74]
[16 73]
[17 72]
[18 71]
[19 70]
[22 67]
[23 66]
[24 65]
[25 64]
[26 63]
[27 62]
[28 61]
[29 60]
[30 59]
[31 58]
[32 57]
[33 56]
[34 55]
[36 52]
[37 51]
[38 50]
[40 48]
[41 47]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF
