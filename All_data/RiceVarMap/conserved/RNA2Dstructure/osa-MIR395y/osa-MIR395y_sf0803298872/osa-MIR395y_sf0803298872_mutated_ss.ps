%!PS-Adobe-3.0 EPSF-3.0
%%Creator: PS_dot.c,v 1.38 2007/02/02 15:18:13 ivo Exp $, ViennaRNA-2.1.9
%%CreationDate: Thu Jul 16 15:13:58 2015
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 66 210 518 662
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: -d2 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  72 216 translate
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  72 6 mul size div dup scale
  size xmin sub xmax sub 2 div size ymin sub ymax sub 2 div
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
UGGCCCCAGGAGUUCCUUGCAAGCACUUCACAUAGAACUUCAGUUACUCUCAUAUAACAUUGUGAUUUUGAGAAGCUAUUGUGAAGUGUUUGGGGGAACUCUCGGUGCCA\
) def
/coor [
[92.51985168 354.96057129]
[92.51985168 339.96057129]
[92.51985168 324.96057129]
[92.51985168 309.96057129]
[84.78255463 297.23330688]
[92.51985168 283.43313599]
[92.51985168 268.43313599]
[84.78255463 255.70585632]
[92.51985168 241.90568542]
[92.51985168 226.90568542]
[92.51985168 211.90568542]
[92.51985168 196.90568542]
[92.51985168 181.90568542]
[92.51985168 166.90568542]
[92.51985168 151.90568542]
[92.51985168 136.90568542]
[92.51985168 121.90567780]
[92.51985168 106.90567780]
[89.33238220 99.36288452]
[92.73812103 91.48269653]
[93.16260529 76.48870850]
[93.58708954 61.49471283]
[94.01157379 46.50072098]
[94.43605042 31.50672913]
[94.86053467 16.51273537]
[95.28501892 1.51874328]
[95.70950317 -13.47524929]
[96.13398743 -28.46924210]
[96.55846405 -43.46323395]
[96.98294830 -58.45722580]
[97.40743256 -73.45121765]
[97.83191681 -88.44521332]
[98.04418182 -103.44371033]
[98.04418182 -118.44371033]
[98.04418182 -133.44371033]
[85.65920258 -142.60441589]
[81.09645081 -157.13145447]
[85.90576172 -171.39099121]
[98.04418182 -179.98149109]
[98.04418182 -194.98149109]
[98.04418182 -209.98149109]
[98.04418182 -224.98149109]
[98.04418182 -239.98149109]
[89.20339966 -244.72280884]
[82.80043793 -252.36938477]
[79.72215271 -261.79421997]
[80.36953735 -271.62915039]
[84.60605621 -280.46353149]
[91.78350067 -287.04644775]
[100.84078217 -290.46383667]
[102.53531647 -305.36782837]
[104.22985077 -320.27178955]
[105.92438507 -335.17578125]
[107.61891937 -350.07974243]
[97.58272552 -362.28836060]
[99.20199585 -378.00949097]
[111.51604462 -387.91604614]
[127.21916199 -386.13064575]
[136.99496460 -373.71255493]
[135.04365540 -358.02917480]
[122.52289581 -348.38522339]
[120.82836151 -333.48123169]
[119.13382721 -318.57727051]
[117.43929291 -303.67327881]
[115.74475861 -288.76931763]
[129.84985352 -274.15667725]
[128.88639832 -253.58401489]
[113.04418182 -239.98149109]
[113.04418182 -224.98149109]
[113.04418182 -209.98149109]
[113.04418182 -194.98149109]
[113.04418182 -179.98149109]
[125.18259430 -171.39099121]
[129.99191284 -157.13145447]
[125.42915344 -142.60441589]
[113.04418182 -133.44371033]
[113.04418182 -118.44371033]
[113.04418182 -103.44371033]
[116.23787689 -96.65584564]
[112.82590485 -88.02072906]
[112.40142822 -73.02673340]
[111.97694397 -58.03274536]
[111.55245972 -43.03875351]
[111.12797546 -28.04475975]
[110.70349121 -13.05076694]
[110.27901459 1.94322610]
[109.85453033 16.93721962]
[109.43004608 31.93121147]
[109.00556183 46.92520523]
[108.58107758 61.91919708]
[108.15659332 76.91319275]
[107.73211670 91.90718079]
[107.51985168 106.90567780]
[107.51985168 121.90567780]
[107.51985168 136.90568542]
[107.51985168 151.90568542]
[107.51985168 166.90568542]
[107.51985168 181.90568542]
[107.51985168 196.90568542]
[107.51985168 211.90568542]
[107.51985168 226.90568542]
[107.51985168 241.90568542]
[115.25714874 255.70585632]
[107.51985168 268.43313599]
[107.51985168 283.43313599]
[115.25714874 297.23330688]
[107.51985168 309.96057129]
[107.51985168 324.96057129]
[107.51985168 339.96057129]
[107.51985168 354.96057129]
] def
/pairs [
[1 110]
[2 109]
[3 108]
[4 107]
[6 105]
[7 104]
[9 102]
[10 101]
[11 100]
[12 99]
[13 98]
[14 97]
[15 96]
[16 95]
[17 94]
[18 93]
[20 92]
[21 91]
[22 90]
[23 89]
[24 88]
[25 87]
[26 86]
[27 85]
[28 84]
[29 83]
[30 82]
[31 81]
[32 80]
[33 78]
[34 77]
[35 76]
[39 72]
[40 71]
[41 70]
[42 69]
[43 68]
[50 65]
[51 64]
[52 63]
[53 62]
[54 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF
