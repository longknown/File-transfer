%!PS-Adobe-3.0 EPSF-3.0
%%Creator: PS_dot.c,v 1.38 2007/02/02 15:18:13 ivo Exp $, ViennaRNA-2.1.9
%%CreationDate: Thu Jul 16 15:13:53 2015
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 66 210 518 662
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: -d2 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  72 216 translate
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  72 6 mul size div dup scale
  size xmin sub xmax sub 2 div size ymin sub ymax sub 2 div
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
GGGAGAGUGCGAUGUUGGCAUGGUUCAAUCAAACCGGGCAAACUUAUGCACUAGCUAAGCAAGAUGCAGGGAUACGCAGUAUGGUUUUGUUUGGUCUGAUUGAGCCGUGCCAAUAUCACAAGCUUGC\
) def
/coor [
[93.36691284 804.55059814]
[85.62960815 791.82336426]
[93.36691284 778.02319336]
[93.36691284 763.02319336]
[93.36691284 748.02319336]
[82.68603516 737.70550537]
[82.47235870 722.49334717]
[93.36691284 711.36022949]
[93.36691284 696.36022949]
[85.62960815 683.63293457]
[93.36691284 669.83276367]
[93.36691284 654.83276367]
[93.36691284 639.83276367]
[93.36691284 624.83276367]
[93.36691284 609.83276367]
[93.36691284 594.83276367]
[93.36691284 579.83276367]
[93.36691284 564.83276367]
[93.36691284 549.83276367]
[93.36691284 534.83276367]
[93.36691284 519.83276367]
[93.36691284 504.83279419]
[93.36691284 489.83279419]
[93.36691284 474.83279419]
[93.36691284 459.83279419]
[93.36691284 444.83279419]
[93.36691284 429.83279419]
[93.36691284 414.83279419]
[93.36691284 399.83279419]
[93.36691284 384.83279419]
[93.36691284 369.83279419]
[85.62960815 357.10549927]
[93.36691284 343.30532837]
[93.36691284 328.30532837]
[93.36691284 313.30532837]
[93.36691284 298.30532837]
[93.36691284 283.30532837]
[93.36691284 268.30532837]
[93.36691284 253.30534363]
[93.36691284 238.30534363]
[93.36691284 223.30534363]
[93.36691284 208.30534363]
[85.62960815 195.57806396]
[93.36691284 181.77789307]
[93.36691284 166.77789307]
[93.36691284 151.77789307]
[93.36691284 136.77789307]
[93.36691284 121.77789307]
[93.36691284 106.77789307]
[72.69619751 108.64910126]
[52.99671555 91.31808472]
[47.94336700 77.19492340]
[36.00922012 66.80807495]
[39.00654221 52.21817017]
[33.95319366 38.09500885]
[22.92425537 25.21871758]
[32.24422073 11.05628300]
[48.43320465 16.09146881]
[48.07635498 33.04166031]
[53.12970352 47.16482162]
[64.70240021 56.54149246]
[62.06652832 72.14157867]
[67.11987305 86.26473999]
[74.61930847 86.35677338]
[97.11761475 86.63288879]
[102.51604462 72.63799286]
[107.91446686 58.64310074]
[99.37182617 45.68922806]
[100.10841370 30.18964386]
[109.84098816 18.10425949]
[124.82718658 14.08015060]
[139.30450439 19.66466904]
[147.70613098 32.71045303]
[146.80143738 48.20113373]
[136.93833923 60.18022919]
[121.90936279 64.04152679]
[116.51093292 78.03642273]
[111.11251068 92.03131104]
[108.36691284 106.77789307]
[108.36691284 121.77789307]
[108.36691284 136.77789307]
[108.36691284 151.77789307]
[108.36691284 166.77789307]
[108.36691284 181.77789307]
[116.10420990 195.57806396]
[108.36691284 208.30534363]
[108.36691284 223.30534363]
[108.36691284 238.30534363]
[108.36691284 253.30534363]
[108.36691284 268.30532837]
[108.36691284 283.30532837]
[108.36691284 298.30532837]
[108.36691284 313.30532837]
[108.36691284 328.30532837]
[108.36691284 343.30532837]
[116.10420990 357.10549927]
[108.36691284 369.83279419]
[108.36691284 384.83279419]
[108.36691284 399.83279419]
[108.36691284 414.83279419]
[108.36691284 429.83279419]
[108.36691284 444.83279419]
[108.36691284 459.83279419]
[108.36691284 474.83279419]
[108.36691284 489.83279419]
[108.36691284 504.83279419]
[108.36691284 519.83276367]
[108.36691284 534.83276367]
[108.36691284 549.83276367]
[108.36691284 564.83276367]
[108.36691284 579.83276367]
[108.36691284 594.83276367]
[108.36691284 609.83276367]
[108.36691284 624.83276367]
[108.36691284 639.83276367]
[108.36691284 654.83276367]
[108.36691284 669.83276367]
[116.10420990 683.63293457]
[108.36691284 696.36022949]
[108.36691284 711.36022949]
[119.26146698 722.49334717]
[119.04778290 737.70550537]
[108.36691284 748.02319336]
[108.36691284 763.02319336]
[108.36691284 778.02319336]
[116.10420990 791.82336426]
[108.36691284 804.55059814]
] def
/pairs [
[1 127]
[3 125]
[4 124]
[5 123]
[8 120]
[9 119]
[11 117]
[12 116]
[13 115]
[14 114]
[15 113]
[16 112]
[17 111]
[18 110]
[19 109]
[20 108]
[21 107]
[22 106]
[23 105]
[24 104]
[25 103]
[26 102]
[27 101]
[28 100]
[29 99]
[30 98]
[31 97]
[33 95]
[34 94]
[35 93]
[36 92]
[37 91]
[38 90]
[39 89]
[40 88]
[41 87]
[42 86]
[44 84]
[45 83]
[46 82]
[47 81]
[48 80]
[49 79]
[51 63]
[52 62]
[54 60]
[55 59]
[65 78]
[66 77]
[67 76]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF
