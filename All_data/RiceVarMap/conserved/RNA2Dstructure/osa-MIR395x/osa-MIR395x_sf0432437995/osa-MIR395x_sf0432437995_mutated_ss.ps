%!PS-Adobe-3.0 EPSF-3.0
%%Creator: PS_dot.c,v 1.38 2007/02/02 15:18:13 ivo Exp $, ViennaRNA-2.1.9
%%CreationDate: Thu Jul 16 15:13:58 2015
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 66 210 518 662
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: -d2 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  72 216 translate
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  72 6 mul size div dup scale
  size xmin sub xmax sub 2 div size ymin sub ymax sub 2 div
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
AUUUGGUAUCGCCAUGAGUUCUCUUCAAACUCUUCAUAUGACACUAAUUCAAGUGAUGUUGUGAAGUGUUUGGAGUAGCUCUUGGUGUCACCAAAC\
) def
/coor [
[86.45365906 388.48962402]
[92.50000000 372.65048218]
[92.50000000 357.65048218]
[92.50000000 342.65048218]
[92.50000000 327.65048218]
[92.50000000 312.65048218]
[92.50000000 297.65048218]
[81.81912994 287.33279419]
[81.60544586 272.12066650]
[92.50000000 260.98754883]
[92.50000000 245.98754883]
[92.50000000 230.98754883]
[92.50000000 215.98754883]
[92.50000000 200.98754883]
[84.76270294 188.26026917]
[92.50000000 174.46009827]
[92.50000000 159.46009827]
[92.50000000 144.46009827]
[92.50000000 129.46009827]
[92.50000000 114.46010590]
[84.71676636 105.63626099]
[84.90729523 93.87179565]
[92.97217560 85.30461884]
[93.45790863 70.31248474]
[93.94363403 55.32035065]
[94.42936707 40.32821655]
[94.91509247 25.33608246]
[95.40081787 10.34394836]
[95.88655090 -4.64818525]
[96.37227631 -19.64031982]
[89.08590698 -33.68380356]
[97.23128510 -46.15385056]
[97.71701813 -61.14598465]
[98.20274353 -76.13811493]
[98.68846893 -91.13024902]
[99.17420197 -106.12238312]
[99.65992737 -121.11451721]
[100.14565277 -136.10665894]
[86.70061493 -146.21746826]
[81.91069794 -162.17150879]
[87.45230103 -177.70521545]
[100.98516846 -186.84045410]
[100.98516846 -201.84045410]
[100.98516846 -216.84045410]
[100.98516846 -231.84045410]
[89.63402557 -242.83715820]
[89.46693420 -258.64056396]
[100.58302307 -269.87478638]
[116.38731384 -269.87478638]
[127.50339508 -258.64056396]
[127.33630371 -242.83715820]
[115.98516846 -231.84045410]
[115.98516846 -216.84045410]
[115.98516846 -201.84045410]
[115.98516846 -186.84045410]
[127.54695892 -179.95654297]
[134.20843506 -168.14002991]
[134.11143494 -154.46664429]
[127.17336273 -142.55766296]
[115.13778687 -135.62092590]
[114.65206146 -120.62879181]
[114.16633606 -105.63665771]
[113.68060303 -90.64452362]
[113.19487762 -75.65238953]
[112.70914459 -60.66025543]
[112.22341919 -45.66812134]
[119.54453278 -32.69697571]
[111.36441040 -19.15459061]
[110.87868500 -4.16245699]
[110.39295197 10.82967663]
[109.90722656 25.82180977]
[109.42150116 40.81394196]
[108.93576813 55.80607605]
[108.45004272 70.79821014]
[107.96430969 85.79034424]
[116.28726196 100.26377869]
[107.50000000 114.46010590]
[107.50000000 129.46009827]
[107.50000000 144.46009827]
[107.50000000 159.46009827]
[107.50000000 174.46009827]
[115.23729706 188.26026917]
[107.50000000 200.98754883]
[107.50000000 215.98754883]
[107.50000000 230.98754883]
[107.50000000 245.98754883]
[107.50000000 260.98754883]
[118.39455414 272.12066650]
[118.18087006 287.33279419]
[107.50000000 297.65048218]
[107.50000000 312.65048218]
[107.50000000 327.65048218]
[107.50000000 342.65048218]
[107.50000000 357.65048218]
[107.50000000 372.65048218]
[113.54634094 388.48962402]
] def
/pairs [
[2 95]
[3 94]
[4 93]
[5 92]
[6 91]
[7 90]
[10 87]
[11 86]
[12 85]
[13 84]
[14 83]
[16 81]
[17 80]
[18 79]
[19 78]
[20 77]
[23 75]
[24 74]
[25 73]
[26 72]
[27 71]
[28 70]
[29 69]
[30 68]
[32 66]
[33 65]
[34 64]
[35 63]
[36 62]
[37 61]
[38 60]
[42 55]
[43 54]
[44 53]
[45 52]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF
