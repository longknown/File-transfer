%!PS-Adobe-3.0 EPSF-3.0
%%Creator: PS_dot.c,v 1.38 2007/02/02 15:18:13 ivo Exp $, ViennaRNA-2.1.9
%%CreationDate: Thu Jul 16 15:13:53 2015
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 66 210 518 662
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: -d2 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  72 216 translate
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  72 6 mul size div dup scale
  size xmin sub xmax sub 2 div size ymin sub ymax sub 2 div
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
UUAGCUCUGGUAGCCAAGGAUGACUUGCCUGUGUCCUUGUGUGUAAGGAUCAUUAAUUAUUAUUCAUAAAAUGAUCCUUUCAGCAGGUUUCAUGGGCAGUCUCCUUGGCUAGCCUGAGUGAU\
) def
/coor [
[88.78498840 442.63088989]
[81.03344727 429.04974365]
[83.87606812 413.67269897]
[95.97064972 403.76034546]
[95.97064972 388.76034546]
[95.97064972 373.76034546]
[95.97064972 358.76034546]
[88.23334503 346.03305054]
[95.97064972 332.23287964]
[95.97064972 317.23287964]
[95.97064972 302.23287964]
[95.77909088 287.23410034]
[95.39601135 272.23901367]
[95.01293182 257.24389648]
[94.62985229 242.24879456]
[94.24677277 227.25367737]
[93.86369324 212.25857544]
[93.48061371 197.26347351]
[93.09753418 182.26835632]
[92.71445465 167.27325439]
[89.35934448 160.58937073]
[92.51801300 151.89140320]
[92.51801300 136.89140320]
[92.51801300 121.89139557]
[92.51801300 106.89139557]
[89.33840942 99.37400818]
[92.71445465 91.50954437]
[93.09753418 76.51443481]
[93.48061371 61.51932526]
[93.86369324 46.52421951]
[94.24677277 31.52911186]
[94.62985229 16.53400421]
[95.01293182 1.53889668]
[82.74901581 -10.85724068]
[83.17777252 -27.95319748]
[95.55158234 -39.26506424]
[95.55158234 -54.26506424]
[95.55158234 -69.26506042]
[95.55158234 -84.26506042]
[95.55158234 -99.26506042]
[92.39291382 -107.96304321]
[95.74802399 -114.64691925]
[96.13110352 -129.64202881]
[88.74876404 -143.63529968]
[96.80857849 -156.16081238]
[97.19165802 -171.15592957]
[97.57473755 -186.15103149]
[97.95781708 -201.14614868]
[98.34089661 -216.14125061]
[98.72397614 -231.13635254]
[99.10705566 -246.13146973]
[99.49013519 -261.12655640]
[99.87321472 -276.12167358]
[100.25629425 -291.11679077]
[97.35729980 -297.26864624]
[97.99331665 -303.06436157]
[101.06132507 -306.86236572]
[102.20956421 -321.81835938]
[103.35780334 -336.77435303]
[104.50604248 -351.73034668]
[95.19715881 -364.79647827]
[99.74705505 -380.18084717]
[114.66542816 -386.08181763]
[128.50819397 -377.97271729]
[130.65635681 -362.07412720]
[119.46202850 -350.58209229]
[118.31378937 -335.62612915]
[117.16555023 -320.67013550]
[116.01731110 -305.71414185]
[115.25140381 -290.73370361]
[114.86832428 -275.73858643]
[114.48524475 -260.74349976]
[114.10216522 -245.74838257]
[113.71908569 -230.75328064]
[113.33600616 -215.75816345]
[112.95292664 -200.76306152]
[112.56984711 -185.76795959]
[112.18676758 -170.77284241]
[111.80368805 -155.77774048]
[119.21342468 -142.85702515]
[111.12621307 -129.25894165]
[110.74313354 -114.26383972]
[110.55158234 -99.26506042]
[110.55158234 -84.26506042]
[110.55158234 -69.26506042]
[110.55158234 -54.26506424]
[110.55158234 -39.26506424]
[120.89215088 -31.46479797]
[124.87680054 -18.93516731]
[120.82274628 -6.22267008]
[110.00804138 1.92197609]
[109.62496185 16.91708374]
[109.24188232 31.91219139]
[108.85880280 46.90729904]
[108.47572327 61.90240479]
[108.09264374 76.89751434]
[107.70956421 91.89262390]
[107.51801300 106.89139557]
[107.51801300 121.89139557]
[107.51801300 136.89140320]
[107.51801300 151.89140320]
[107.70956421 166.89018250]
[108.09264374 181.88528442]
[108.47572327 196.88038635]
[108.85880280 211.87550354]
[109.24188232 226.87060547]
[109.62496185 241.86570740]
[110.00804138 256.86080933]
[110.39112091 271.85592651]
[110.77420044 286.85104370]
[114.15396881 295.46551514]
[110.97064972 302.23287964]
[110.97064972 317.23287964]
[110.97064972 332.23287964]
[118.70794678 346.03305054]
[110.97064972 358.76034546]
[110.97064972 373.76034546]
[110.97064972 388.76034546]
[110.97064972 403.76034546]
[123.06523132 413.67269897]
[125.90785217 429.04974365]
[118.15631104 442.63088989]
] def
/pairs [
[4 119]
[5 118]
[6 117]
[7 116]
[9 114]
[10 113]
[11 112]
[12 110]
[13 109]
[14 108]
[15 107]
[16 106]
[17 105]
[18 104]
[19 103]
[20 102]
[22 101]
[23 100]
[24 99]
[25 98]
[27 97]
[28 96]
[29 95]
[30 94]
[31 93]
[32 92]
[33 91]
[36 87]
[37 86]
[38 85]
[39 84]
[40 83]
[42 82]
[43 81]
[45 79]
[46 78]
[47 77]
[48 76]
[49 75]
[50 74]
[51 73]
[52 72]
[53 71]
[54 70]
[57 69]
[58 68]
[59 67]
[60 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF
